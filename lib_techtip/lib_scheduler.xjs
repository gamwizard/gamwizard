<?xml version="1.0" encoding="utf-8"?>
<Script version="1.0" type="xscript5.1"><![CDATA[/**
* @description 	    	: 스케줄러 초기화 함수
* @param objGraphics  	: 스케줄러 설정할 Graphics Component
* @param objConfig   	: 초기화 설정 값
* @return           	: 없음
*/
this.gfnInitScheduler = function(objGraphics, objConfig)
{
	//Graphics 컴포넌트에 config 정보 추가
	objGraphics.config = objConfig;
	
	//스케줄러 설정 함수 호출
	this.gfnSetScheduler(objGraphics);
}

/**
* @description 	    	: 스케줄러 설정 함수
* @param objGraphics  	: 스케줄러 설정할 Graphics Component
* @param objDate	   	: 설정할 일자 오브젝트
* @return           	: 없음
*/
this.gfnSetScheduler = function(objGraphics, objDate)
{
	var i, j;
	
	var nRightGap = 0
	var nBottomGap = 0;
	
	//스케줄러 설정 정보 가져오기
	var objConfig = objGraphics.config;
	
	var objWeek;
	var objWeekText;
	var objWeekGroup;
	
	//요일 영역 설정정보 가져오기
	var objWeekConfig = objConfig.week;
	
	//요일 영역 배경 설정 정보 가져오기
	var objWeekRectProp = objWeekConfig.graphicsrect;
	
	//요일 영역 텍스트 설정 정보 가져오기
	var objWeekTextProp = objWeekConfig.graphicstext;
	
	//요일 표현 텍스트 리스트 가져오기
	var arrWeekFormat = objWeekConfig.weekformat;
	
	//요일영역 Left 좌표 초기화
	var nWeekGroupLeft = 0;
	
	//요일영역 Top 좌표 초기화
	var nWeekGroupTop = 0;
	
	//요일영역 Width 값 초기화
	//(스케줄러 Width를 7로 나눠서 사용)
	var nWeekGroupWidth = nexacro.floor(objGraphics.getOffsetWidth()/7);
	
	//요일영역 Height 값 가져오기
	var nWeekGroupHeight = objWeekConfig.height;
	
	var objDay;
	var objDayText;
	var objDayGroup;
	
	//일자 영역 설정 정보 가져오기
	var objDayConfig = objConfig.day;
	
	//일자 영역 배경 설정 정보 가져오기
	var objDayRectProp = objDayConfig.graphicsrect;
	
	//일자 영역 텍스트 설정 정보 가져오기
	var objDayTextProp = objDayConfig.graphicstext;
	
	//일자 영역 Left 좌표 초기화
	var nDayGroupLeft = 0;
	
	//일자 영역 Top 좌표 초기화
	var nDayGroupTop = 0;
	
	//일자 Left 좌표 초기화
	var nDayLeft = 0;
	
	//일자 Top 좌표 초기화
	var nDayTop = 0;
	
	//일자 Width 값 초기화(요일영역과 동일)
	var nDayWidth = nWeekGroupWidth;
	
	//일자 Height 값
	var nDayHeight;
	
	//스케줄러 상에 일자 위치를 설정하기 위한 변수
	var nDayPos;
	
	//일자의 전체 값(yyyyMMdd)
	var sFullDate;
	
	//텍스트 색상 값
	var sTextColor;
	
	//GraphicsGroup Property를 설정하기 위한 변수
	var objProperties;
		
	//파라미터로 넘어온 일자 오브젝트가 없을 경우
	if(!objDate)
	{
		//스케줄러에 설정된 표현일자가 없을 경우
		//오늘날짜 기준으로 설정
		if(!objGraphics.config.date)
		{
			objDate = new Date();
			objGraphics.config.date = objDate;
			objGraphics.config.todate = objDate;
		}
		//스케줄러에 설정된 포현일자가 있을 경우
		else
		{
			//스케줄러의 표현일자로 설정
			objDate = objGraphics.config.date;
		}
	}
	
	//설정할 년월 값 가져오기
	var sYearMonth = this.gfnGetMaskFormatDateToString(objDate, "yyyyMM");
	
	//설정할 년월의 시작일자 설정하기
	var sFirstDate = sYearMonth + "01";
	
	//시작일자를 Date 오브젝트로 만들기
	var objFirstDate = this.gfnStrToDate(sFirstDate);
	
	//시작일자의 요일 값 가져오기(0~6)
	var nFirstDay = objFirstDate.getDay();
	
	//스케줄러에 표현될 주(Week) 갯수
	var nWeekCount = this.gfnGetCountWeeksInMonth(sYearMonth);
	
	//시작일자를 설정값 현재 표현일자에 설정하기
	objConfig.date = objFirstDate;
	
	//Graphics 컴포넌트 초기화
	objGraphics.clear();
	
	//요일 영역 GraphicsGroup 오브젝트 만들기
	objProperties = { "x" : nWeekGroupLeft, "y" : nWeekGroupTop };
	objWeekGroup = this.gfnSetGraphicProperties("GraphicsGroup", objProperties);
	
	for(i=0;i<7;i++)
	{
		//마지막 요일일 경우
		if(i==6)
		{
			//Graphics 컴포넌트 Right와 마지막 요일 영역의 Width를 맞추기 위한 계산
			//Graphics 컴포넌트 Width - 마지막 요일의 Right - 요일의 Border값(1px)
			nRightGap = objGraphics.getOffsetWidth() - (nWeekGroupLeft+nWeekGroupWidth) - 1;
		}
		
		//요일 배경의 Left 좌표 설정
		objWeekRectProp.x = nWeekGroupLeft;
		
		//요일 배경의 Top 좌표 설정
		objWeekRectProp.y = nWeekGroupTop;
		
		//요일 배경의 Width값 설정
		objWeekRectProp.width = nWeekGroupWidth + nRightGap;
		
		//요일 배경의 Height값 설정
		objWeekRectProp.height = nWeekGroupHeight;
		
		//요일 배경 오브젝트 만들기 
		objWeek = this.gfnSetGraphicProperties("GraphicsRect", objWeekRectProp);
		
		//요일 그룹에 요일 배경 추가
		objWeekGroup.addChild("week_"+i, objWeek);
		
		//요일 텍스트 Left 좌표 설정
		//중앙에 표시될 수 있도록 Center 좌표값 구하기
		objWeekTextProp.x = nWeekGroupLeft + nWeekGroupWidth/2;
		
		//요일 텍스트 Top 좌표 설정
		//중앙에 표시될 수 있도록 Center 좌표값 구하기
		objWeekTextProp.y = nWeekGroupTop + nWeekGroupHeight/2;
		
		//요일 텍스트의 텍스트 설정
		objWeekTextProp.text = arrWeekFormat[i];
		
		//요일 텍스트 오브젝트 만들기
		objWeekText = this.gfnSetGraphicProperties("GraphicsText", objWeekTextProp);
		
		//요일 그룹에 요일 텍스트 오브젝트 추가
		objWeekGroup.addChild("week_"+i+"_text", objWeekText);
		
		//다음 요일의 Left 좌표 설정
		nWeekGroupLeft += nWeekGroupWidth;
	}
	
	//요일 그룹을 Graphics 컴포넌트에 추가
	objGraphics.addChild("weekgroup", objWeekGroup);
	
	//일자 영역의 Top 좌표 설정
	nDayGroupTop = nWeekGroupTop + nWeekGroupHeight;
	
	//일자 영역 GraphicsGroup 오브젝트 만들기
	objProperties = { "x" : nDayGroupLeft, "y" : nDayGroupTop };
	objDayGroup = this.gfnSetGraphicProperties("GraphicsGroup", objProperties);
	
	//일자 Top 좌표 설정
	nDayTop = 0;
	
	//일자 Width 값 설정
	nDayWidth = nWeekGroupWidth;
	
	//일자 Height 값 설정
	//(Graphics 컴포넌트의 Height - 요일영역의 Height)/ 표현될 주(Week) 갯수
	nDayHeight = nexacro.floor((objGraphics.getOffsetHeight()-nWeekGroupHeight)/nWeekCount);
	
	for(i=0;i<nWeekCount;i++)
	{
		//일자 Left 초기화
		nDayLeft = 0;
		
		//주차별 마지막 일자 오른쪽 여백 값 초기화
		nRightGap = 0;
		
		//마지막주차일 경우
		if(i==nWeekCount-1)
		{
			//Graphics 컴포넌트 Bottom와 마지막 주차 영역의 Height를 맞추기 위한 계산
			//Graphics 컴포넌트 Height - 마지막 주차의 Bottom - 일자의 Border값(1px)
			nBottomGap = objGraphics.getOffsetHeight() - (nDayGroupTop + nDayTop + nDayHeight) - 1;
		}
		
		for(j=0;j<7;j++)
		{
			//설정할 일자의 위치값
			//이전월의 일자, 다음월의 일자를 처리하기 위함
			nDayPos = (i*7) + j - nFirstDay;
			
			//설정할 일자 계산
			objDate = this.gfnAddDate(objFirstDate, nDayPos);
			
			//설정할 일자의 전체 값(yyyyMMdd)
			sFullDate = this.gfnGetMaskFormatDateToString(objDate, "yyyyMMdd");
			
			//마지막 요일에 해당하는 일자일 경우
			if(j==6)
			{
				//Graphics 컴포넌트 Right와 마지막 요일 영역의 Width를 맞추기 위한 계산
				//Graphics 컴포넌트 Width - 마지막 요일의 Right - 요일의 Border값(1px)
				nRightGap = objGraphics.getOffsetWidth() - (nDayLeft+nDayWidth) - 1;
			}
			
			//일자 GraphicsGroup 오브젝트 만들기
			objProperties = {
								"x" : nDayLeft, "y" : nDayTop
							};
			objDay = this.gfnSetGraphicProperties("GraphicsGroup", objProperties);
			
			//일자 배경의 Width값 설정
			objDayRectProp.width = nDayWidth + nRightGap;
			
			//일자 배경의 Height값 설정
			objDayRectProp.height = nDayHeight + nBottomGap;
			
			//일자 배경 오브젝트 만들기
			objDayBg = this.gfnSetGraphicProperties("GraphicsRect", objDayRectProp);
			
			//일자 GraphicsGroup에 일자 배경 오브젝트 추가
			objDay.addChild("day_bg", objDayBg);
			
			//일자 텍스트 색상 가져오기
			//일요일, 토요일, 이전월 or 이후월 일자, 현재월 일자
			if(objDate.getMonth()!=objFirstDate.getMonth())sTextColor = objConfig.day.textcolor_disable;
			else if(objDate.getDay()==0)sTextColor = objConfig.day.textcolor_sun;
			else if(objDate.getDay()==6)sTextColor = objConfig.day.textcolor_sat;
			else sTextColor = objConfig.day.textcolor;
			
			//일자 텍스트 Left 좌표 설정(일자 영역 기준 오른쪽 정렬로 보이도록 설정)
			//일자 배경 Width - 패딩(5px)
			objDayTextProp.x = nDayWidth - 5;
			
			//일자 텍스트 Top 좌표 설정 
			//패딩(5px)
			objDayTextProp.y = 5;
			
			//일자 텍스트의 텍스트 값 설정
			objDayTextProp.text = objDate.getDate();
			
			//일자 텍스트 색상 설정
			objDayTextProp.color = sTextColor;
			
			//일자 텍스트 오브젝트 만들기
			objDayText = this.gfnSetGraphicProperties("GraphicsText", objDayTextProp);
			
			//일자 GraphicGroup에 일자 텍스트 오브젝트 추가
			objDay.addChild("day_text", objDayText);
			
			//일자 그룹에 일자 오브젝트 추가
			objDayGroup.addChild("day_"+sFullDate, objDay);
			
			//다음 일자의 Left 좌표 값 설정
			nDayLeft += nDayWidth;
		}
		
		//다음 일자의 Top 좌표 값 설정
		nDayTop += nDayHeight;
	}
	
	//일자 그룹을 Graphics 컴포넌트에 추가
	objGraphics.addChild("daygroup", objDayGroup);
	
	//Graphics 컴포넌트 다시그리기
	objGraphics.redraw();
	
	//스케줄 조회 함수 호출
	this.gfnLoadScheduler(objGraphics);
}

/**
* @description 	    	: 스케줄 조회 함수
* @param objGraphics  	: 설정할 Graphics Component
* @return           	: 없음
*/
this.gfnLoadScheduler = function(objGraphics)
{
	var i;
	
	//스케줄러 설정 정보 가져오기
	var objConfig = objGraphics.config;
	
	//스케줄러와 연결된 데이터셋 가져오기
	var objDs = objConfig.binddataset;
	
	//일정 ID
	var sId;
	
	//일정 일자
	var sDate;
	
	//일정 타이틀
	var sTitle;
	
	//일정 타입 
	var sType;
	
	//현재 일자
	var sTargetDate;
	
	//일자 오브젝트
	var objDay;
	
	//일자 그룹 오브젝트 가져오기
	var objDayGroup = objGraphics.getObjectByID("daygroup").getObjects();
	
	//일정 설정 정보 가져오기
	var objScheduleConfig = objConfig.schedule;
	
	//일정 타입별 배경색 정보 가져오기
	var objScheduleType = objScheduleConfig.type;
	
	//일정 배경 속성 정보
	var objScheduleRectProp;
	
	//일정 텍스트 속성 정보
	var objScheduleTextProp;
	
	var objSchedule;
	var objSchedules;
	var objScheduleBg;
	var objScheduleText;
	
	//더보기 설정 정보 가져오기
	var objMoreConfig = objConfig.more;
	
	//더보기 배경 속성 정보
	var objMoreRectProp;
	
	//더보기 텍스트 속성 정보
	var objMoreTextProp;
	
	//더보기 Height 값 가져오기
	var nMoreHeight = objMoreConfig.height;
	
	//일정 Left 좌표 초기화
	var nLeft = 0;
	
	//일정 Top 좌표 초기화 값
	var nTopDef = objConfig.week.height;
	
	//일정 Top 좌표 초기화
	var nTop = 0;
	
	var nWidth;
	
	//일정 Height 값 초기화
	var nHeight = objScheduleConfig.height;
	
	//일정 Gap 값 초기화
	var nGap = objScheduleConfig.gap;
	
	var nDayWidth;
	var nDayHeight;
	
	//스케줄러에 표현된 일자 갯수(이전, 이후 월 일자 포함
	var nDayCount = objDayGroup.length;
	
	//스케줄 갯수
	var nScheduleCount;
	
	//성능향상을 위해 데이터셋 Enable Event False 시작
	objDs.set_enableevent(false);
	
	//일정 정보 초기화
	for(i=0;i<nDayCount;i++)
	{
		//일자 오브젝트 가져오기
		objDay = objDayGroup[i];
		
		//일자 오브젝트에 포함된 하위 오브젝트 가져오기
		//일정 오브젝트 갯수 + 2개(일자 배경, 일자 텍스트)
		objSchedules = objDay.getObjects();
		nScheduleCount = objSchedules.length;
		
		//일자 배경, 일자 텍스트를 뺀 나머지 오브젝트 삭제
		for(j=nScheduleCount-1;j>=2;j--)
		{
			objDay.removeChild(objSchedules[j].id);
		}
	}
	
	//일정 오브젝트 만들기
	for(i=0;i<nDayCount;i++)
	{
		//일자 오브젝트 가져오기
		objDay = objDayGroup[i];
		
		//일자 오브젝트의 Width 값 가져오기
		nDayWidth = objDay.getRect().width;
		
		//일자 오브젝트의 Height 값 가져오기
		nDayHeight = objDay.getRect().height;
		
		//일정 Width값 계산
		//-2는 Border값
		nWidth = nDayWidth-2;
		
		//일정 Height 값 가져오기
		nHeight = objScheduleConfig.height;
		
		//현재 일자 가져오기(ex) day_20200612 -> 20200612)
		sTargetDate = objDay.id.split("_")[1];
		
		//현재 일자에 해당하는 일정 Filter
		objDs.filter("date=='"+sTargetDate+"'");
		
		//일정 갯수 가져오기
		nScheduleCount = objDs.rowcount;
		
		//일정 Top 좌표 초기화
		nTop = nTopDef;
		
		for(j=0;j<nScheduleCount;j++)
		{
			//일정 배경 정보 가져오기
			objScheduleRectProp = objScheduleConfig.graphicsrect;
			
			//일정 텍스트 정보 가져오기
			objScheduleTextProp = objScheduleConfig.graphicstext;
			
			//일정 데이터 가져오기
			sId = objDs.getColumn(j, "id");
			sDate = objDs.getColumn(j, "date");
			sTitle = objDs.getColumn(j, "title");
			sType = objDs.getColumn(j, "type");
			
			//일정 GraphicsGroup 오브젝트 만들기
			objProperties = {
							"x" : 0, "y" : nTop + nGap
					};
			objSchedule = this.gfnSetGraphicProperties("GraphicsGroup", objProperties);
			
			//일정 배경의 Width 값 설정
			objScheduleRectProp.width = nWidth;
			
			//일정 배경의 Height 값 설정
			objScheduleRectProp.height = nHeight;
			
			//일정 타입에 따른 일정 배경의 FillStyle 값 설정
			objScheduleRectProp.fillstyle = objScheduleType[sType];
			
			//일정 배경 오브젝트 만들기
			objScheduleBg = this.gfnSetGraphicProperties("GraphicsRect", objScheduleRectProp);
			
			//일정에 일정 배경 오브젝트 추가
			objSchedule.addChild("schedule_bg", objScheduleBg);
			
			//일정 텍스트 Left 좌표 설정
			objScheduleTextProp.x = 5;
			
			//일정 텍스트 Top 좌표 설정
			objScheduleTextProp.y = nHeight/2;
			
			//일정 텍스트의 텍스트 값 설정
			objScheduleTextProp.text = sTitle;
			
			//일정 텍스트 오브젝트 만들기
			objScheduleText = this.gfnSetGraphicProperties("GraphicsText", objScheduleTextProp);
			
			//일정에 일정 텍스트 오브젝트 추가
			objSchedule.addChild("schedule_text", objScheduleText);
			
			//일자에 일정 오브젝트 추가
			objDay.addChild(sId, objSchedule);
			
			//다음 일정의 Top 좌표 설정
			nTop = objSchedule.y+objScheduleRectProp.height;
		}
		
		//생성된 일정이 일자영역을 벗어나는 경우 더보기 오브젝트 생성
		if(nTop > nDayHeight - nMoreHeight&&!objDay.getObjectByID("more_"+sTargetDate))
		{
			//더보기 배경 속성 정보 가져오기
			objMoreRectProp = objMoreConfig.graphicsrect;
			
			//더보기 텍스트 속성 정보 가져오기
			objMoreTextProp = objMoreConfig.graphicstext;
			
			//더보기 GraphicsGroup 오브젝트 만들기
			objProperties = {
								"x" : 0, "y" : nDayHeight - nMoreHeight
							};
			objMore = this.gfnSetGraphicProperties("GraphicsGroup", objProperties);
			
			//더보기 배경 Width 값 설정
			objMoreRectProp.width = nWidth;
			
			//더보기 배경 Height 값 설정
			objMoreRectProp.height = nMoreHeight;
			
			//더보기 배경 오브젝트 만들기
			objScheduleBg = this.gfnSetGraphicProperties("GraphicsRect", objMoreRectProp);
			
			//더보기에 더보기 배경 오브젝트 추가
			objMore.addChild("more_bg", objScheduleBg);
			
			//더보기 텍스트 Left 좌표 설정
			objMoreTextProp.x = 5;
			
			//더보기 텍스트 Top 좌표 설정
			objMoreTextProp.y = nHeight/2;
			
			//더보기 텍스트 오브젝트 만들기
			objScheduleText = this.gfnSetGraphicProperties("GraphicsText", objMoreTextProp);
			
			//더보기에 더보기 텍스트 오브젝트 추가
			objMore.addChild("more_text", objScheduleText);
			
			//일자에 더보기 오브젝트 추가
			objDay.addChild("more_"+sTargetDate, objMore);
		}
	}
	
	//Graphics 컴포넌트 다시그리기
	objGraphics.redraw();
	
	//Filter 초기화
	objDs.filter("");
	
	//성능향상을 위해 데이터셋 Enable Event False 종료
	objDs.set_enableevent(true);
	
}

/**
* @description 	    	: 해당 월의 주(Week) 갯수 구하는 함수
* @param sYearMonth  	: 확인할 년월 텍스트(202006)
* @return           	: 주(Week) 갯수
*/
this.gfnGetCountWeeksInMonth = function(sYearMonth) 
{

    var nYear = nexacro.toNumber(sYearMonth.substr(0, 4));
	var nMonth = nexacro.toNumber(sYearMonth.substr(4, 2));

    var objFirstOfMonth = new Date(nYear, nMonth-1, 1);
    var objLastOfMonth = new Date(nYear, nMonth, 0);

    var nDays = objFirstOfMonth.getDay() + objLastOfMonth.getDate();
	
    return nexacro.ceil( nDays / 7);
}

/**
* @description 	    : Graphics 하위 오브젝트 생성 및 속성 설정 함수
* @param sCompId  	: 오브젝트 명
* @param jsnProps   : 오브젝트 속성 값
* @return           : Graphics 하위 오브젝트
*/
this.gfnSetGraphicProperties = function(sCompId, jsnProps)
{
	//Graphics 하위 오브젝트 생성
	var objComp = new nexacro[sCompId];
	var objFunc;
	var sProp;
	
	//설정정보를 오브젝트의 속성으로 설정
	for(sProp in jsnProps)
	{
		//속성 설정함수 가져오기
		objFunc = objComp["set_"+sProp];
		
		if(objFunc)
		{
			//속성 설정함수 실행
			objFunc.call(objComp, jsnProps[sProp]);
		}
	}
	
	//생성된 Graphics 하위 오브젝트 리턴
	return objComp;
}]]></Script>
