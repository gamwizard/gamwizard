<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="test3" width="1280" height="720" titletext="New Form" onload="test3_onload">
    <Layouts>
      <Layout height="720" width="1280">
        <Grid id="Grid00" taborder="0" left="13" top="10" width="447" height="270" binddataset="dsList" selecttype="area" autoenter="select">
          <Formats>
            <Format id="default">
              <Columns>
                <Column size="80"/>
                <Column size="80"/>
                <Column size="80"/>
                <Column size="80"/>
                <Column size="80"/>
                <Column size="80"/>
                <Column size="80"/>
                <Column size="80"/>
              </Columns>
              <Rows>
                <Row size="24" band="head"/>
                <Row size="24"/>
              </Rows>
              <Band id="head">
                <Cell text="chk"/>
                <Cell col="1" text="Column0"/>
                <Cell col="2" text="Column1"/>
                <Cell col="3" text="Column2"/>
                <Cell col="4" text="Column3"/>
                <Cell col="5" text="Column4"/>
                <Cell col="6" text="Column5"/>
                <Cell col="7" text="Column6"/>
              </Band>
              <Band id="body">
                <Cell text="bind:chk" edittype="text"/>
                <Cell col="1" text="bind:Column0" edittype="text"/>
                <Cell col="2" text="bind:Column1" edittype="text"/>
                <Cell col="3" text="bind:Column2" edittype="text"/>
                <Cell col="4" text="bind:Column3" edittype="text"/>
                <Cell col="5" text="bind:Column4" edittype="text"/>
                <Cell col="6" text="bind:Column5" edittype="text"/>
                <Cell col="7" text="bind:Column6" edittype="text"/>
              </Band>
            </Format>
          </Formats>
        </Grid>
        <Button id="Button00" taborder="1" text="Button00" left="490" top="25" width="120" height="50" onclick="Button00_onclick"/>
        <Tab id="Tab00" taborder="2" tabindex="0" left="535" top="170" width="355" height="28">
          <Tabpages>
            <Tabpage id="Tabpage1" text="Tabpage1"/>
          </Tabpages>
        </Tab>
        <Button id="Button01" taborder="3" text="Button01" left="750" top="90" width="120" height="50" onclick="Button01_onclick"/>
        <Button id="Button02" taborder="4" text="Button02" left="160" top="305" width="120" height="50" onclick="Button02_onclick"/>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[/**
*  @FileName 		Grid.js
*  @Creator 		common
*  @CreateDate 		2020.07.01 
*  @LastModifier  	
*  @LastModifyDate  
*  @Version 		1.0
*  @Outline 		Grid 공통 함수 모음
*  @Desction		Grid 공통 함수 모음
*  
************** 소스 수정 이력 *************************************************
*    date          Modifier            Description
*******************************************************************************
*  2020.07.01      common 	           최초 생성 
*******************************************************************************
*/

var CommLib = nexacro.Form.prototype;

//grid propertiy
//grid propertiy
CommLib.defaultmenulis = "checkbox,no,colfix,filter,colhide,colshow,export,cellcopypaste";
CommLib.popupmenulist = "colfix,filter,colhide,colshow,export";

//소트
// 헤더 클릭시 정렬 false= 오름/내림 true= 오름/내림/없음
CommLib.SORT_TOGGLE_CANCEL = true;
CommLib.MARKER_TYPE = "text"; // 정렬 표시자 구분 (text or image)
// Grid Head 에 정렬 상태를 표시할 텍스트 또는 이미지 경로 지정 
CommLib.MARKER = ["▲", "▼"];// [오름차순표시, 내림차순표시]
//cell copy and paste 시 chorme용 textarea 저장 object
CommLib.tragetGrid = "";
/**
 * @class Grid에 기능 추가
 * @param {Object} obj	- 대상그리드
 * @return N/A
 * @example
 * this.gfnSetGrid(this.grdMain);	
*/
CommLib.gfn_setGrid = function(objGrid)
{
	var objForm = this;

	//Grid의 binddataset설정
	var objDs = objGrid.getBindDataset();
	
	// grid에 바인드된 Dataset이 없는 경우 return;
	if (this.gfn_isNull(objDs)) return;
	
	//Grid의 UserProperty설정
	var arrProp = this._getGridUserProperty(objGrid);
	
	
	//설정할 속성이 없는 경우 return;
	if(this.gfn_isNull(arrProp)) return;
	
	//그리드 Property 세팅
	objGrid.set_cellsizingtype("col");
	objGrid.set_autoenter("select");
	//grid.areaselecttype 	 = "limitband";
	objGrid.set_cellsizebandtype("allband");
	objGrid.set_cellmovingtype("col");
	objGrid.set_scrollpixel("none");	
	objGrid.set_nodataimage("URL('theme://images/img_WF_noData.png')");
	
	objGrid.set_enableevent(false);
	objGrid.set_enableredraw(false);	
	objDs.set_enableevent(false); 
	
	objGrid.orgformat = objGrid.getFormatString();
	
	objGrid.arrprop = arrProp;
	this._gfnGridAddProp(objGrid);
	
	objGrid.orgcurformat = objGrid.getCurFormatString();
	
	this._gfnMakeGridPopupMenu(objGrid,arrProp);//popupmenu 생성
	
	/*********************************************** 이벤트추가 START ***********************************************/	
	objGrid.addEventHandler("onheadclick", this._Grid_onheadclick, objForm); 	//헤드클릭이벤트추가
	for( var k=0; k< arrProp.length; k++){
		var arr = this.popupmenulist.split(",");
		for( var n=0; n<arr.length; n++){
			if( arrProp[k] == arr[n]){
				//우클릭 이벤트 중 하나라도 있어야 팝업 이벤트 사용 가능
				//우클릭이벤트추가
				objGrid.addEventHandler("onrbuttondown", this._Grid_onrbuttondown, objForm);	
				break;
			}
		}
		if( arrProp[k] == "cellcopypaste"){
			objGrid.colSeperator = "	";
			objGrid.targetForm = objForm;
			
			if (system.navigatorname == "nexacro" || system.navigatorname == "IE" && system.navigatorversion < 12) 
			{
				objGrid.addEventHandler("onkeydown", objForm.grdCopyPasteStateChk, objForm);
				objGrid.addEventHandler("onkeyup", objForm.grdCopyPaste, objForm);		
			}
			else
			{
				objForm.addEventHandler("ontimer", objForm.blinkTimerHandler, objForm);	
				objGrid.addEventHandler("onkeydown", objForm.grdCopyPasteEtc, objForm);
			}
		}
	}
	
	//cell의 size가 0인 경우 사이즈 변경할 수 없도록 처리
	objGrid.addEventHandler("oncolresized", this._Grid_oncolresized, objForm);
	
	//cell이 checkbox인 경우 shift를 사용하여 다중선택 되도록 처리
	objGrid.addEventHandler("onlbuttonup", this._Grid_onlbuttonu , objForm);	
	
	//cell이 checkbox인 경우 모두 선택했을 때 head의 checkbox 선택
	objGrid.addEventHandler("oncellclick", this._Grid_oncellclick, objForm);
	
	/*********************************************** 이벤트추가 END *************************************************/
	
	objGrid.set_enableevent(true);
	objGrid.set_enableredraw(true);	
	objDs.set_enableevent(true);
};	

/**
 * @class  그리드 셀클릭 이벤트
 * @param {Object} objGrid - 대상그리드
 * @param {Evnet}  e	   - 헤드클릭이벤트
 */
CommLib._Grid_oncellclick = function(objGrid, e)
{		
	if (objGrid.getCellProperty("head", e.cell, "edittype") == "checkbox")
	{	
		var objDs = objGrid.getBindDataset();
		var sBindId = this.gfn_getBindCellId(objGrid, "body", e.cell);
		
		if (objDs.getCaseCount(sBindId + " == '1'") == objDs.rowcount)
		{
			objGrid.setCellProperty("head", e.cell, "text", "1");
		}
		else
		{
			objGrid.setCellProperty("head", e.cell, "text", "0");
		}
	}
}

/**
 * @class  그리드헤드클릭 이벤트 [Sort, Checkbox]
 * @param {Object} objGrid - 대상그리드
 * @param {Evnet}  e	   - 헤드클릭이벤트
 */
CommLib._Grid_onheadclick = function(objGrid, e)
{
	var sType = objGrid.getCellProperty("head", e.cell, "displaytype");
	if (sType == "checkboxcontrol"){
		//head display type이 checkbox일 경우 all/none check기능추가
		this._gfnHeadCheckSelectAll(objGrid, e);
	}else{
		//sort
		if(this.gfn_isNull(objGrid.sort) || objGrid.sort=="false"){
			return;
		}else if(objGrid.sort == "true"){
			var arr = objGrid.arrprop;
			var bUserHeader = this._gfnGridUserHeaderFlg(objGrid);
			var multiple = false;
			if ( e.ctrlkey ) multiple = true;// Ctrl 키
			if(!bUserHeader){
				// 정렬 상태 변경이 성공하면 정렬을 실행한다.
				var rtn = this._gfnGridSetSortStatus(objGrid, e.cell, multiple);
				if(rtn){
					this._gfnGridExecuteSort(objGrid);
				}
			}else{
				this._gfnGirdUserHeaderExcuteSort(objGrid, e.cell, multiple);
			}
		}
	}
};

/**
 * @class  마우스 우클릭 이벤트
 * @param  {Object} objGrid	- 대상그리드
 * @param  {Event}  e		- 우클릭이벤트 
 */
CommLib._Grid_onrbuttondown = function (objGrid, e)
{
	var objApp =  nexacro.getApplication();
	
	// 대상 그리드와 셀 정보를 추가
	objGrid.popupMenu.grid = objGrid;
	objGrid.popupMenu.cellindex = e.cell;
	objGrid.popupMenu.rowindex = e.row;

	// trackPopupByComponent 이용 : 하단에서 위치 오류 발생, 패치 2018년 9월 예정
	var x = nexacro.toNumber(system.getCursorX()) - nexacro.toNumber(system.clientToScreenX(objGrid, 0));
	var y = nexacro.toNumber(system.getCursorY()) - nexacro.toNumber(system.clientToScreenY(objGrid, 0));
	
	// 스튜디오 사용시 팝업메뉴 위치 조정
	var sRunMode = nexacro.getEnvironmentVariable("evRunMode");
	if (sRunMode == "S") {
		y += 83;
	}	
	objGrid.popupMenu.trackPopupByComponent(objGrid, x, y);
};

/**
 * @class 그리드 셀 사이즈 변경 이벤트
 * @param {Object} objGrid	- 대상그리드
 * @param {Evnet}  e 		- 셀사이즈 변경 이벤트
 */
CommLib._Grid_oncolresized = function(objGrid, e)
{
	if (e.oldvalue == 0) objGrid.setFormatColProperty(e.formatindex, "size", 0);	
}

/**
 * @class 그리드 셀 사이즈 변경 이벤트
 * @param {Object} objGrid	- 대상그리드
 * @param {Evnet}  e 		- 셀사이즈 변경 이벤트
 */
CommLib._Grid_onlbuttonup = function(objGrid, e)
{
	if (e.shiftkey && objGrid.getCellProperty("body", e.cell, "edittype") == "checkbox")
	{
		var objDs = objGrid.getBindDataset();
		var sBindCellId = this.gfn_getBindCellId(objGrid, "body", e.cell);	
		objDs.setColumn(e.row, sBindCellId, 1);
		
		var nStartRow;
		var nEndRow = e.row;
					
		for (var i=0; i<objDs.rowcount; i++)
		{
			if (objDs.getColumn(i, sBindCellId) == "1")
			{
				nStartRow = i;
				break;
			}
		}
		
		if (nStartRow == nEndRow)
		{
			for (var i=objDs.rowcount; i>=0; i--)
			{
				if (objDs.getColumn(i, sBindCellId) == "1")
				{
					nEndRow = i;
					break;
				}
			}
		}
		
		objDs.set_enableevent(false);			
		objGrid.set_enableredraw(false);
		for(var i=nStartRow; i<nEndRow; i++)
		{		
			objDs.setColumn(i, sBindCellId, "1");
		}
		objGrid.set_enableredraw(true);
		objDs.set_enableevent(true);
	}
}

/**
 * @class Grid에 기능 추가(addCol..)
 * @param {Object} objGrid	- 대상그리드
 * @return N/A
 * @example
 * this._gfnGridAddProp(this.grdMain);	
*/
CommLib._gfnGridAddProp = function (objGrid)
{
	var objDs = objGrid.getBindDataset();

	if (this.gfn_isNull(objGrid.no)) objGrid.no = "true";
	if (this.gfn_isNull(objGrid.checkbox)) objGrid.checkbox = "false";
	if (this.gfn_isNull(objGrid.cellsort)) objGrid.cellsort = "true";

	if (objGrid.checkbox == "true") this._gfnGridCheckboxNoStatusAdd(objGrid, objDs, "checkbox");
	if (objGrid.no == "true") this._gfnGridCheckboxNoStatusAdd(objGrid, objDs, "no");
	
	objGrid.sort = objGrid.cellsort;	
};

/**
 * @class Grid에 기능 추가(addCol..)
 * @param {Object} objGrid	- 대상그리드
 * @param {Object} objDs	- 대상데이터셋
 * @param {Array} addProp	- 기능
 * @return N/A
 * @example
 * this._gfnGridCheckboxNoStatusAdd(this.grdMain, this.dsList, [checkbox,no,status]);	
*/
CommLib._gfnGridCheckboxNoStatusAdd = function (objGrid, objDs, addProp)
{	
	var nHeadColIndex;
	if(this.gfn_isNull(objDs.insertheadcell)) nHeadColIndex = 0;
	else nHeadColIndex = objDs.insertheadcell;	

	var nBodyColIndex;
	if(this.gfn_isNull(objDs.insertbodycell)) nBodyColIndex = 0;
	else nBodyColIndex = objDs.insertbodycell;
	
	var nFormatRowCount = objGrid.getFormatRowCount();
	var nHeadCount=-1;
	var nBodyCount=-1;
	for (var i=0; i<nFormatRowCount; i++)
	{
		if (objGrid.getFormatRowProperty(i, "band") == "head") nHeadCount++;
		if (objGrid.getFormatRowProperty(i, "band") == "body") nBodyCount++;
	}

	
	//번호
	if( addProp == "no")
	{
		for( var i=0; i<objGrid.getCellCount("head"); i++){
			var tmp = objGrid.getCellProperty("head" , i, "text");
			if( tmp == "No" || tmp == "순번"){
				//return;
				trace(111);
				objGrid.deleteContentsCol("body", i);
			}
		}
		objGrid.insertContentsCol(nBodyColIndex);	
		objGrid.setFormatColProperty(nBodyColIndex, "size", "50");	
 		objGrid.setCellProperty("head", nHeadColIndex, "text", "No");	
		objGrid.setCellProperty("head", nHeadColIndex, "textAlign","center");
		objGrid.setCellProperty("body", nBodyColIndex, "text","expr:currow+1");
		objGrid.setCellProperty("body", nBodyColIndex, "textAlign","center");
		objGrid.mergeContentsCell("head", 0, nBodyColIndex, nHeadCount, nBodyColIndex, nHeadColIndex, false);	
		objGrid.mergeContentsCell("body", 0, nBodyColIndex, nBodyCount, nBodyColIndex, nBodyColIndex, false);		
		
		objGrid.setFormatColProperty(nBodyColIndex,"band", "left");

		
		nHeadColIndex++;
 		nBodyColIndex++;
	}
	
	//체크박스
	if( addProp == "checkbox")
	{
		objDs.set_enableevent(false); 
		var idx=-1;
		for( var j=0; j<objDs.getColCount(); j++){
			var tmpcol = objDs.getColID(j);
			if( tmpcol == "GRID_COMM_CHECK"){
				idx = j;
			}
		}
		if( idx < 0 ) objDs.addColumn("GRID_COMM_CHECK", "STRING", 1);
		
		
		for( var i=0; i<objGrid.getCellCount("head"); i++){
			//헤드텍스트
			var tmp = objGrid.getCellProperty("head" , i, "text");
			if( tmp == "0"){
				// head cell index 에 해당하는 body cell index
				var bodyCellIndex = this._gfnGridGetBodyCellIndex(objGrid, i);
				// body cell index 에 해당하는 바인드 컬럼명
				var columnName = this._gfnGridGetBindColumnNameByIndex(objGrid, bodyCellIndex);
				if(columnName == "GRID_COMM_CHECK") {
					//return;
					objGrid.deleteContentsCol("body", i);
				}
			}
		}
		objGrid.insertContentsCol(nBodyColIndex);			
		objGrid.setFormatColProperty(nBodyColIndex, "size", "30");	
		objGrid.setCellProperty("head", nHeadColIndex, "displaytype", "checkboxcontrol");
		objGrid.setCellProperty("head", nHeadColIndex, "edittype", "checkbox");
		objGrid.setCellProperty("head", nHeadColIndex, "text", "0");
		objGrid.setCellProperty("body", nBodyColIndex, "displaytype", "checkboxcontrol");
		objGrid.setCellProperty("body", nBodyColIndex, "edittype", "checkbox");
		objGrid.setCellProperty("body", nBodyColIndex, "text", "bind:GRID_COMM_CHECK");
		
		objGrid.mergeContentsCell("head", 0, nBodyColIndex, nHeadCount, nBodyColIndex, nHeadColIndex, false);	
		objGrid.mergeContentsCell("body", 0, nBodyColIndex, nBodyCount, nBodyColIndex, nBodyColIndex, false);	
		
		objGrid.setFormatColProperty(nBodyColIndex,"band", "left");
		
		nHeadColIndex++;
 		nBodyColIndex++;
	}
};

/**
 * @class 유저헤더사용여부반환
 * @param {Object} objGrid - 대상그리드
 * @return 유저헤더사용여부 true/false
 * @example
 * this._gfnGridUserHeaderFlg(this.grdMain);
 */
CommLib._gfnGridUserHeaderFlg = function (objGrid)
{
	var arr = objGrid.arrprop;
	var bUserHeader = false;
	for( var i=0; i<arr.length; i++){
		if( arr[i] == "userheader"){
			bUserHeader = true;
		}
	}
	return bUserHeader;
};

/**
 * @class 유저헤더를 이용한 정렬
 * @param {Object} grid - 대상그리드
 * @return N/A
 * @example
 * this._gfnGirdUserHeaderExcuteSort(objGrid);
 */
CommLib._gfnGirdUserHeaderExcuteSort = function (objGrid, headCellIndex, multiple)
{
	var bindCol = objGrid.getCellProperty("head", headCellIndex, "calendarweekformat");
	if( this.gfn_isNull(bindCol)) return false; //헤더에 바인드없음

	var bodyCellIdx = 0;
	var nbodyCnt = objGrid.getCellCount("body");
	for( var i=0; i<nbodyCnt; i++){
		var tmp =  objGrid.getCellProperty("body", i, "text");
		if( tmp == bindCol ){
			bodyCellIdx = i;
			break;
		}
	}
	var rtn = this._gfnGridSetSortStatus(objGrid, headCellIndex, multiple, "", bodyCellIdx);
	if(rtn){
		this._gfnGridExecuteSort(objGrid);
	}
};

/**
 * @class 정렬가능여부리턴
 * @param {Object} grid - 대상그리드
 * @param {Number} headCellIndex - 대상셀INDEX
 * @param {Boolean}multiple - 멀티소트여부 
 * @param {Number} sortStatus - 소트상태  
 * @return{Boolean} sort 가능/불가능 여부
 * @example
 * this._gfnGridSetSortStatus(obj, e.cell, multiple);	
 */
CommLib._gfnGridSetSortStatus = function(grid, headCellIndex, isMultiple, sortStatus, bodyCellIndex)
{
	// head cell index 에 해당하는 body cell index
	if( this.gfn_isNull(bodyCellIndex)){
		bodyCellIndex = this._gfnGridGetBodyCellIndex(grid, headCellIndex);
	}
	if ( bodyCellIndex < 0 ) return false;
	
	// body cell index 에 해당하는 바인드 컬럼명
	var columnName = this._gfnGridGetBindColumnNameByIndex(grid, bodyCellIndex);
	if ( this.gfn_isNull(columnName) ){
		return false;
	}
	
	if ( this.gfn_isNull(isMultiple) ) isMultiple = false;
	if ( this.gfn_isNull(sortStatus) ) sortStatus = -1;
	
	// 대상 grid 에 정렬정보를 가지는 사용자 속성 확인/추가
	if ( this.gfn_isNull(grid.sortInfos) ){
		grid.sortInfos = {};
	}
	
	// 정렬대상컬럼 (순서중요)
	if ( this.gfn_isNull(grid.sortItems) ){
		grid.sortItems = [];
	}
	
	var sortInfos = grid.sortInfos,
		sortItems = grid.sortItems,
		sortInfo = sortInfos[columnName],
		sortItem,
		status;
	
	if ( this.gfn_isNull(sortInfo) )
	{
		var headText = grid.getCellText(-1, headCellIndex);
		
		// executeSort에서 정렬 표시를 위해 cell index 가 필요한데
		// cell moving 될 경우 index는 변하므로 cell object 를 참조하여 값을 얻어온다. 		
		var refCell = this._gfnGridGetGridCellObject(grid, "head", headCellIndex);
		sortInfo = sortInfos[columnName] = { status: 0, text: headText, refCell: refCell};
	}
	// set sort status
	if ( isMultiple ) {		
		status = sortInfo.status;
		if ( sortStatus == -1 ) {
			if ( status == 0 ) {
				sortInfo.status = 1;
			} 
			else if ( status == 1 ) {
				sortInfo.status = 2;
			} 
			else if ( status == 2 ) {
				sortInfo.status = ( this.SORT_TOGGLE_CANCEL ? 0 : 1);
			}
		}
		else {
			sortInfo.status = sortStatus;
		}
	}else {
		for (var p in sortInfos) {
			if ( sortInfos.hasOwnProperty(p) )
			{
				sortInfo = sortInfos[p];
				if ( p == columnName ) {
					status = sortInfo.status;
					if ( sortStatus == -1 ) {
						if ( status == 0 ) {
							sortInfo.status = 1;
						} 
						else if ( status == 1 ) {
							sortInfo.status = 2;
						} 
						else if ( status == 2) {
							sortInfo.status = ( this.SORT_TOGGLE_CANCEL ? 0 : 1);
						}
					}else {
						sortInfo.status = sortStatus;
					}
				}else {
					sortInfo.status = 0;
				}
				if ( sortInfo.status == 0 ){
					for (var j=0, len2=sortItems.length; j<len2; j++) {
						if ( sortItems[j] !== columnName ) {
							sortItems.splice(j, 1);
							break;
						}
					}
				}
			}
		}
	}
	
	// 컬럼정보 등록
	var hasItem = false;
	for (var i=0, len=sortItems.length; i<len; i++) {
		if ( sortItems[i] == columnName ) {
			hasItem = true;
			break;
		}
	}	
	if ( !hasItem ){
		sortItems.push(columnName);
	}
	return true;
}; 

/**
 * @class head cell에 match되는 body cell을 얻어온다
 * @param {Object}  grid 대상 Grid Component
 * @param {Number} eadCellIndex head cell index
 * @return{Number}  body cell index
 * @example
 * this._gfnGridSetSortStatus(obj, e.cell, multiple);	
 */ 
CommLib._gfnGridGetBodyCellIndex = function(grid, headCellIndex, useColspan) 
{	//, useColspan) 
	if( this.gfn_isNull(useColspan)) useColspan=false;
	// Max Head Row Index
	var maxHeadRow = 0;
	for (var i=0, len=grid.getCellCount("head"); i<len; i++) {
		var row = grid.getCellProperty("head", i, "row");
		if (maxHeadRow < row) {
			maxHeadRow = row;
		}
	}
	// Max Body Row Index
	var maxBodyRow = 0;
	for (var i=0, len=grid.getCellCount("body"); i<len; i++) {
		var row = grid.getCellProperty("body", i, "row");
		if (maxBodyRow < row) {
			maxBodyRow = row;
		}
	}
	
	if (maxHeadRow == 0 && maxBodyRow == 0) {
		useColspan = true;
	}
	
	// Body Row 가 1개 이상일 경우
	// Head의 row 가 Body의 row 보다 클 경우 차이 row 를 뺀 것을 대상으로 찾고
	// Body의 row 가 Head의 row 보다 크거나 같을 경우 row index가 같은 대상을 찾는다.			
	var cellIndex = -1;
	var sRow = -1;
	var nRow = parseInt(grid.getCellProperty("head", headCellIndex, "row"));
	var nCol = parseInt(grid.getCellProperty("head", headCellIndex, "col"));
	var nColspan = parseInt(grid.getCellProperty("head", headCellIndex, "colspan"));				
	
	if (maxHeadRow > maxBodyRow) 
	{
		sRow = nRow - (maxHeadRow - maxBodyRow);
		sRow = (sRow < 0 ? 0 : sRow);
	}
	else 
	{
		sRow = nRow;
	}
	var cRow, cCol, cColspan, cRowspan;
	for (var i=0, len=grid.getCellCount("body"); i<len; i++) 
	{
		cRow = parseInt(grid.getCellProperty("body", i, "row"));
		cCol = parseInt(grid.getCellProperty("body", i, "col"));	
		cColspan = parseInt(grid.getCellProperty("body", i, "colspan"));					
		cRowspan = parseInt(grid.getCellProperty("body", i, "rowspan"));
		if( cRowspan > 1 )
		{
			if ( useColspan ){
				if (sRow >= cRow && nCol <= cCol && cCol < (nCol + nColspan)) 
				{		
					cellIndex = i;
					break;
				}		
			}else{
				if (sRow >= cRow && nCol == cCol && nColspan == cColspan) 
				{		
					cellIndex = i;
					break;
				}
			}
		}else{	
			if ( useColspan ){
				if (sRow == cRow && nCol <= cCol && cCol < (nCol + nColspan)) 
				{		
					cellIndex = i;
					break;
				}		
			}else{
				if (sRow == cRow && nCol == cCol && nColspan == cColspan) 
				{		
					cellIndex = i;
					break;
				}
			}
		}
	}
	return cellIndex;
};

/**
 * @class body cell index로 binding 된 컬럼명을 얻어온다.
 * @param {Object}  grid 대상 Grid Component
 * @param {Number} eadCellIndex head cell index
 * @return{String} column id
 * @example
 * this._gfnGridGetBindColumnNameByIndex(obj, e.cell);	
 */  
CommLib._gfnGridGetBindColumnNameByIndex = function(grid, index) 
{
	var text = "";
	var columnid = "";
	var subCell = grid.getCellProperty("body", index, "subcell");
	if ( subCell > 0 ){
		text = grid.getSubCellProperty("body", index, 0, "text");
	}
	else{
		text = grid.getCellProperty("body", index, "text");
	}
	
	if ( !this.gfn_isNull(text) ){
		if ( text.search(/^BIND\(/) > -1 ) {	
			columnid = text.replace(/^BIND\(/, "");
			columnid = columnid.substr(0, columnid.length-1);
		} 
		else if ( text.search(/^bind:/) > -1 ) {
			columnid = text.replace(/^bind:/, "");
		}
	}
	return columnid;
};

/**
 * @class 소트를 실행한다
 * @param {Object}  grid 대상 Grid Component
 * @return{String}  N/A
 * @example
 * this._gfnGridExecuteSort(obj);	
 */  
CommLib._gfnGridExecuteSort = function(grid) 
{
	var sortInfo, 
		sortItem,
		sortInfos = grid.sortInfos,
		sortItems = grid.sortItems,
		columnName,
		status,
		cell,
		sortString = "";
		
	if ( this.gfn_isNull(sortInfos) || this.gfn_isNull(sortItems) ) return;

	// keystring 조합
	for (var i=0; i<sortItems.length; i++) {
		columnName = sortItems[i];
		sortInfo = sortInfos[columnName];
		status = sortInfo.status;
		cell = sortInfo.refCell;
		
		// 컬럼삭제 등으로 제거될 수 있으므로 실제 column 이 존재하는지
		// 확인하여 없으면 제거해 준다.
		if ( this.gfn_isNull(cell) || grid.getBindCellIndex("body", columnName) < 0 ){
			// 컬럼정보제거
			sortItems.splice(i, 1);
			sortInfos[columnName] = null;
			delete sortInfos[columnName];
			
			i--;
		}else if ( status > 0 ) {
			sortString += (status == 1 ? "+" : "-") + columnName;
		}
	}
	
	var ds = grid.getBindDataset();
	// keystring 확인
	var curKeyString = ds.keystring;
	var groupKeyString = "";
	
	if ( curKeyString.length > 0 && curKeyString.indexOf(",") < 0 ){
		var sIndex = curKeyString.indexOf("S:");
		var gIndex = curKeyString.indexOf("G:");

		if ( sIndex > -1 ){
			groupKeyString = "";
		}else{
			if ( gIndex < 0 )
			{
				groupKeyString = "G:"+curKeyString;
			}
			else
			{
				groupKeyString = curKeyString;
			}
		}
	}else{
		var temps = curKeyString.split(",");
		var temp;
		for (var i=0,len=temps.length; i<len; i++){
			temp = temps[i];
			if ( temp.length > 0 && temp.indexOf("S:") < 0 ){
				if ( temp.indexOf("G:") < 0 )
				{
					groupKeyString = "G:"+temp;
				}else{
					groupKeyString = temp;
				}
			}
		}
	}
	
	if ( sortString.length > 0 ){
		var sortKeyString = "S:"+sortString;
		
		if ( groupKeyString.length > 0 ){
			ds.set_keystring(sortKeyString + "," + groupKeyString);
		}else{
			ds.set_keystring(sortKeyString);
		}
		
		grid.sortKeyString = sortKeyString;
	}else{		
		ds.set_keystring(groupKeyString);
		grid.sortKeyString = "";
	}

	// 정렬표시
	var type = this.MARKER_TYPE;
	var index, marker;
	for (var p in sortInfos) {
		if ( sortInfos.hasOwnProperty(p) )
		{
			sortInfo = sortInfos[p];			
			cell = sortInfo.refCell;
			if ( cell )
			{
				index = cell._cellidx;
				marker = this.gfn_decode(sortInfo.status, 1, this.MARKER[0], 2, this.MARKER[1], "");
				grid.setCellProperty( "head", index, "text", sortInfo.text + marker);
			}
		}
	}
};

/**
 * Cell object 를 반환 (Grid 내부 속성이므로 get 용도로만 사용)
 * @param {Grid} grid 대상 Grid Component
 * @param {string} band 얻고자 하는 cell 의 band (head/body/summ);
 * @param {number} index 얻고자 하는 cell 의 index
 * @return {object} cell object
 */
CommLib._gfnGridGetGridCellObject = function(grid, band, index)
{
	// 내부속성을 통해 얻어온다.
	var refCell;
	var format = grid._curFormat;
	if (format){
		if ( band == "head" ){
			refCell = format._headcells[index];
		}
		else if ( band == "body" ){
			refCell = format._bodycells[index];
		}
		else if ( band == "summ" || band == "summary" ){
			refCell = format._summcells[index];
		}
	}
	return refCell;
};

/**
 * @class 그리드의 Sort Mark 제거
 * @param {Object} Grid 대상그리드
 * @return N/A
 */  
CommLib._gfnClearSortMark = function(obj)
{
	var sortInfos = obj.sortInfos;
	var sortItems = obj.sortItems;
	
	if ( this.gfn_isNull(sortInfos) || this.gfn_isNull(sortItems) ) return;
	
	// 정렬상태 초기화.
	for( var j=0; j<sortItems.length;j++){
		var col = sortItems[j];
		var sortInfo = sortInfos[col];
		sortInfo.status = 0;
	}
	
	// 정렬실행
	this._gfnGridExecuteSort(obj);
	
	// 정보 초기화
	obj.sortInfos = {};
	obj.sortItems = [];
};

/**
 * @class  gfnCreatePopupMenu 내부함수로 팝업메뉴 클릭 시 발생하는 이벤트
 * @param {Object} objGrid	- 대상그리드
 * @param {Evnet}  e 		- 팝업메뉴클릭이벤트
 * @return N/A
 * @example
 * this.gfnPopupmenu_onmenuclick(this.grdMain, nexacro.MenuClickEventInfo);	
 */
CommLib.gfnPopupmenu_onmenuclick = function (objMenu, e)
{
	var selectId   = e.id;
	var grid 	   = objMenu.grid;
	var nCellIndex = objMenu.cellindex;	
	var nRowIndex  = objMenu.rowindex;

	switch(selectId) {
		case "colfix"://틀고정 열
			this.fv_CellIndex = nCellIndex;
			this._gfnGridcellFix(grid, this.fv_CellIndex, nRowIndex);
			break;
		case "colfixfree"://틀고정 열 해제
			this._gfnGridCellFree(grid);
			break;
		case "filter"://필터
			this._gfnGridFilter(grid);
			break;
		case "filterfree"://필터해제
			this._gfnGridCellFilterFree(grid);
			break;
		case "colhide"://컬럼숨기기
			this._gfnGridColHideShow(grid, nRowIndex);
			break;	
		case "colshow"://컬럼숨기기 해제
			this._gfnGridColHideShowFree(grid);
			break;	
		case "export"://엑셀내보내기
			this._gfnGridExcelExport(grid);
			break;	
			break;	
		default: break;
	}
};

/**
 * @class  그리드헤드클릭이벤트 내부함수 (헤드클릭시 체크 ALL/None)
 * @param {Object} objGrid - 대상그리드
 * @param {Evnet}  e	   - 헤드클릭이벤트
 * @return  N/A
 * @example
 * this._gfnHeadCheckSelectAll(objGrid, e); //ALL CHECK
 */
CommLib._gfnHeadCheckSelectAll = function (objGrid, e)
{
	if(objGrid.readonly == true) return;
	
	var sType;
	var sChk;
	var sVal;
	var sChkVal;
	var oDsObj;
	var nHeadCell  = e.cell;
	var nBodyCell;
	var nSubCnt = objGrid.getSubCellCount("head", nHeadCell);

	oDsObj  = objGrid.getBindDataset();
	
	if(oDsObj.getRowCount() < 1) return;
	
	if(objGrid.getCellCount("body") != objGrid.getCellCount("head")) {
		nBodyCell = parseInt(objGrid.getCellProperty("head", nHeadCell, "col"));
	} else {
		nBodyCell = e.cell;
	}
	sChkVal = objGrid.getCellProperty("body", nBodyCell, "text");
	sChkVal = sChkVal.toString().replace("bind:", "");
		
	// Merge한 셀이 없는 경우
	sType = objGrid.getCellProperty("head", nHeadCell, "displaytype");

	if(sType != "checkboxcontrol") {
		return;
	}

	// Head셋팅
	sVal = objGrid.getCellProperty("head", nHeadCell, "text");

	if (sVal == "1" ){
		objGrid.setCellProperty("head", nHeadCell, "text", "0");
		var bodyCellIndex = this._gfnGridGetBodyCellIndex(objGrid, nHeadCell);
		// body cell index 에 해당하는 바인드 컬럼명
		var columnName = this._gfnGridGetBindColumnNameByIndex(objGrid, bodyCellIndex);
		if(columnName == "GRID_COMM_CHECK") {
			 sChk="";
		}else{
			sChk="0";
		}
	}
	//1이외 (0 or undefined 포함)
	else {
		objGrid.setCellProperty("head", nHeadCell, "text", "1");
		sChk="1";
	}
	
	
	// Body셋팅
	oDsObj.set_enableevent(false);
	for(var i=0 ; i< oDsObj.rowcount ; i++) {
		oDsObj.setColumn(i, sChkVal, sChk);
	}
	oDsObj.set_enableevent(true);
};

/**
 * @class  마우스우클릭시 표현될 팝업메뉴생성
 * @param  {Object} objGrid	- 대상그리드
 * @return  N/A
 * @example
 * this._gfnGetHeadBodyIndex(this.grdMain, this.dsMain);	
 */
CommLib._gfnMakeGridPopupMenu = function (objGrid, arrProp)
{
	var objApp 		 =  nexacro.getApplication();
	var objMenuDs 	 = objApp.gds_GridPopupMenu;
	var objParentForm= objGrid.parent;
	
	var sPopupDsMenu = "dsPopupMenu_"+objGrid.name+"_"+this.name;
	var objPopupDs 	 = new Dataset(sPopupDsMenu);
	objParentForm.addChild(sPopupDsMenu, objPopupDs); 
	objPopupDs.copyData(objApp.gds_GridPopupMenu);
	
	for (var i=0; i<arrProp.length; i++) {
		for (var j=0; j<objPopupDs.rowcount; j++){
			var sMenu = objPopupDs.getColumn(j,"id");
			
			if (this.gfn_isNull(sMenu)) continue;
			
			if (sMenu.indexOf(arrProp[i]) > -1) {
				objPopupDs.setColumn(j, "enable", "true");
				if (objPopupDs.getColumn(j, "level") == 1) {
					var sUpMenu = objPopupDs.getColumn(j, "upmenu");
					var nUpRow = objPopupDs.findRow("id", sUpMenu);
					if (nUpRow > -1) objPopupDs.setColumn(nUpRow, "enable", "true");
				}
			}
		}
	}
	
	var sPopMenu = "popMenu_"+objGrid.name+"_"+this.name;
	var objPopMenu = new PopupMenu(sPopMenu, 0, 0, 100, 100);
	
	objParentForm.addChild(objPopMenu.name, objPopMenu);
	
	objPopMenu.set_innerdataset(sPopupDsMenu);
	objPopMenu.set_captioncolumn("caption");
	objPopMenu.set_enablecolumn("enable");
	objPopMenu.set_idcolumn("id");
	objPopMenu.set_levelcolumn("level");
 	objPopMenu.addEventHandler("onmenuclick", this.gfnPopupmenu_onmenuclick, objParentForm);
	objPopMenu.show();
	
	objPopMenu.set_itemheight(29);
	
	objPopMenu.grid = objGrid;
	objGrid.popupMenu = objPopMenu;
};

/**
 * @class  그리드 설정 내부함수<br>
		   그리드에 유저프로퍼티를 Array형태로 반환한다.
 * @param  {Object}objGrid	- 대상그리드
 * @return {Array} user property
 * @example
 * this._getGridUserProperty(this.grdMain);	
 */
CommLib._getGridUserProperty = function (objGrid)
{
	var sProp = objGrid.griduserproperty;
	
	var arrdefault = this.defaultmenulis.split(",");
	var arrprop = [];
	
	if(!this.gfn_isNull(sProp)){
		arrprop = sProp.split(",");
		for( var i=0; i<arrprop.length; i++){
			if( arrprop[i].indexOf("!") == 0 ){
				//TODO.DEFAULT에서제거
				for( var j=0; j<arrdefault.length; j++){
					if( arrdefault[j] == arrprop[i].substr(1) ){
						arrdefault[j] = "";
					}
				}
				arrprop[i] = "";
			}
		}
	}
	
	var arrmyprop = [];
	for( var i=0; i< arrdefault.length; i++){
		if(!this.gfn_isNull(arrdefault[i])){
			arrmyprop.push(arrdefault[i]);
		}
	}
	
	for( var i=0; i< arrprop.length; i++){
		if(!this.gfn_isNull(arrprop[i])){
			arrmyprop.push(arrprop[i]);
		}
	}
	
	return arrmyprop;
};


//////////////////////////////////////////////////////////////////////////Popupmenu//////////////////////////////////////////////////////////////////////////
/**
 * @class 그리드 우클릭 POPUPMENU 내부함수<br>
		  셀고정(colfix)
 * @param {Object} objGrid  - 대상그리드
 * @param {Number} nCellIdx - 셀고정 셀인덱스
 * @param {Number} nRowIdx  - 셀고정 로우 인덱스
 * @return N/A
 * @example
 * this._gfnGridcellFix(this.grdMain, 1, 2);	
 */
CommLib._gfnGridcellFix = function (objGrid, nCellIdx, nRowIdx)
{
	var sBandType;
	if(nRowIdx == -1) sBandType = "Head";
	else if(nRowIdx == -2) sBandType = "Summary";
	else sBandType = "Body";
	
	var nCol 	 = nexacro.toNumber(objGrid.getCellProperty(sBandType, nCellIdx, "col"));
	var nColSpan = nexacro.toNumber(objGrid.getCellProperty(sBandType, nCellIdx, "colspan"));
	var nRowSpan = nexacro.toNumber(objGrid.getCellProperty(sBandType, nCellIdx, "rowspan"));
	var nVal = objGrid.getCellpos
	var nMaxCol = 0;
	var i;
	var nRealCol;
	var nRealColSpan;
	var nRealCol_end;
	
	objGrid.set_enableredraw(false);
	
	objGrid.setFormatColProperty(0, "band", "body");	
	
	for (i=0; i<objGrid.getCellCount("Head"); i++)
	{
		nRealCol = nexacro.toNumber(objGrid.getCellProperty("Head", i, "col"));
		nRealColSpan = nexacro.toNumber(objGrid.getCellProperty("Head", i, "colspan"));
		nRealCol_end = nRealCol+nRealColSpan-1;
		if ( nRealCol == nCol || nRealCol_end==nCol)
		{
			if(nRealColSpan>1)
			{
				objGrid.setCellProperty("Head", i, "border", "1px solid #eef0f6,1px solid #82878e,1px solid #eef0f6,1px solid #eef0f6");
				nCol = nRealCol_end;
			}else
			{
				objGrid.setCellProperty("Head", i, "border", "1px solid #eef0f6,1px solid #82878e,1px solid #eef0f6,1px solid #eef0f6");
				nCol = nRealCol_end;
			}
		}
		else
		{
			objGrid.setCellProperty("Head", i, "border", "");
		}
	}
	
	for (i=0; i<objGrid.getCellCount("Body"); i++)
	{
		if (objGrid.getCellProperty("Body", i, "col") == nCol)
		{			
			objGrid.setCellProperty("Body", i, "border", "1px solid #eef0f6,1px solid #82878e,1px solid #eef0f6,1px solid #eef0f6");
		}
		else
		{
			objGrid.setCellProperty("Body", i, "border", "");
		}
	}	
	
	objGrid.setFormatColProperty(nCol, "band", "left");	
	objGrid.set_enableredraw(true);
};

/**
 * @class 그리드 우클릭 POPUPMENU 내부함수<br>
		  셀고정해제(colfree)
 * @param {Object} objGrid - 대상그리드
 * @return N/A
 * @example
 * this._gfnGridCellFree(this.grdMain);	
 */
CommLib._gfnGridCellFree = function(objGrid)
{
	var sColumnText;

	for(i=0; i< objGrid.getFormatColCount(); i++)
	{		
		sColumnText = objGrid.getCellProperty("head", i, "text")
		
		if( sColumnText == "No" ) continue;
		if( sColumnText == "0" && objGrid.getCellProperty("Body", i, "text") == "bind:GRID_COMM_CHECK" ) continue;
		objGrid.setFormatColProperty(i, "band", "body");	
	}
		
	for (i=0; i<objGrid.getCellCount("Body"); i++)
	{
		objGrid.setCellProperty("Head", i, "border", "");
	}
		
	for (i=0; i<objGrid.getCellCount("Body"); i++)
	{
		objGrid.setCellProperty("Body", i, "border", "");
	}	
	
	this.gv_CellIndex = -1;
};

/**
 * @class 그리드 우클릭 POPUPMENU 내부함수<br>
          셀필터(cellFilter)
 * @param {Object} objGrid - 대상그리드	
 * @return N/A
 * @example
 * this._gfnGridFilter(this.grdMain);	
 */
CommLib._gfnGridFilter = function(objGrid)
{
	var arrArg = {pv_objGrid:objGrid};
	var sPopupCallBack = "gfn_callbackGridFilter";
	this.gfn_openPopupDefault("CommGridFilter","Comm::CommGridFilter.xfdl",arrArg, "titletext=Filter", sPopupCallBack);	
};

/**
 * @class 그리드 우클릭 POPUPMENU 내부함수<br>
          셀필터해제(cellfilterfree)
 * @param {Object} objGrid - 대상그리드	
 * @param {Number} nCell - 셀필터 셀 인덱스
 * @return N/A
 * @example
 * this._gfnGridCellFilterFree(this.grdMain);	
 */
CommLib._gfnGridCellFilterFree = function(objGrid)
{
	var objDs = objGrid.getBindDataset();
	objDs.set_filterstr("");
};

/**
 * @class 그리드 우클릭 POPUPMENU 내부함수<br>
          컬럼 숨기기/보이기
 * @param {Object} objGrid - 대상그리드	
 * @return N/A
 * @example
 * this._gfnGridColHideShow(this.grdMain);	
 */
CommLib._gfnGridColHideShow = function(objGrid)
{
	var arrArg = {pv_objGrid:objGrid};
	var sPopupCallBack = "gfn_callbackHideColumn";
	this.gfn_openPopupDefault("CommColumnHide","Comm::CommColumnHide.xfdl",arrArg, "titletext=컬럼 숨기기", sPopupCallBack);	
};

/**
 * @class 그리드 우클릭 POPUPMENU 내부함수<br>
          컬럼 숨기기/보이기 해제
 * @param {Object} objGrid - 대상그리드	
 * @return N/A
 * @example
 * this._gfnGridColHideShowFree(this.grdMain);	
 */
CommLib._gfnGridColHideShowFree = function(objGrid)
{
	objGrid.set_formats(objGrid.orgcurformat);
};

/**
 * @class 그리드 우클릭 POPUPMENU 내부함수<br>
          엑셀익스포트
 * @param {Object} objGrid - 대상그리드	
 * @return N/A
 * @example
 * this._gfnGridExcelExport(this.grdMain);	
 */
CommLib._gfnGridExcelExport = function(objGrid)
{
	this.gfn_exportExcel(objGrid);
};

//////////////////////////////////////////////////////////////////////////POPUPMENU CALLBACK///////////////////////////////////////////////////////////
/**
 * @class 그리드 우클릭 POPUPMENU 내부함수<br>
          그리드 필터 팝업 콜백
 * @param {String} sid - popupid	
 * @param {String} rtn - return value	 
 * @return N/A
 * @example
 * this.gfn_callbackGridFilter("TEST", "");	
 */
CommLib.gfn_callbackGridFilter = function (sid, rtn)
{
	//TODO
};

/**
 * @class 그리드 우클릭 POPUPMENU 내부함수<br>
          그리드 컬럼숨기기/보이기
 * @param {String} sid - popupid	
 * @param {String} rtn - return value	 
 * @return N/A
 * @example
 * this.gfn_callbackHideColumn("TEST", "");	
 */
CommLib.gfn_callbackHideColumn = function (sid, rtn)
{
	//TODO
};

//////////////////////////////////////////////////////////////////////////CELL COPY AND PASTE//////////////////////////////////////////////////////////////////////////
/**
* @description paste data : setPasteData --> set copy paste grid component
* @param clipText
* @return
*/
CommLib.setPasteData =  function(objForm,clipText)
{
	//var pThis = objForm;
	var objTargetGrid = objForm.targetGrid;
	var colSeperator = objTargetGrid.colSeperator;	
	objTargetGrid.set_enableevent(false);
	objTargetGrid.set_enableredraw(false); 
	
	var ds = objTargetGrid.getBindDataset();
	ds.set_enableevent(false); 
	
	var grdCellCount = objTargetGrid.getCellCount("body");
	var rowCount = ds.getRowCount();
	var startrow = nexacro.toNumber(objTargetGrid.selectstartrow),
		endrow   = nexacro.toNumber(objTargetGrid.selectendrow),
		startcol = nexacro.toNumber(objTargetGrid.selectstartcol),
		endcol   = nexacro.toNumber(objTargetGrid.selectendcol);
	
	var currRow = startrow;
	var cellIndex = startcol;
	
	copyData = clipText;
	
	var rowData = copyData.split(/[\n\f\r]/); 
	var rowDataCount = rowData.length - 1;
	var checkIndex = {};	

	for (var i = 0; i < rowDataCount; i++) 
	{
		if(rowCount <= currRow)
		{
			ds.addRow();
		}
		
		var columnData = rowData[i].split(colSeperator);
		var columnLoopCount = cellIndex + columnData.length;
		
		if(columnLoopCount > grdCellCount) 
		{
			columnLoopCount = grdCellCount;
		}
		
		var k = 0;
		for(var j = cellIndex; j < columnLoopCount; j++)
		{
			var colid = objTargetGrid.getCellProperty("body", j, "text").substr(5);
			var tempValue = columnData[k];
			if(!this.gfn_isNull(tempValue))
			{
				ds.setColumn(currRow, colid, tempValue);
			}
			
			k++;									
		}
		
		currRow++;
	}									

	ds.rowposition = currRow;	
	
	endrow = endrow + rowDataCount - 1;
	endcol = columnLoopCount - 1;		
									
	objTargetGrid.set_enableredraw(true);
	objTargetGrid.set_enableevent(true);
	ds.set_enableevent(true); 
	
	objTargetGrid.selectArea(startrow, startcol, endrow, endcol);
}

/**
* @description create textarea : createElementTextarea --> create document innerhtml : textarea
* @param clipText
* @return
*/
CommLib.createElementTextarea = function(innerText)
{
	var txtValue = document.createElement('textarea');
	txtValue.style.position = 'absolute';
	txtValue.style.left = '-1000px';
	txtValue.style.top = document.body.scrollTop + 'px';
	txtValue.value = innerText;
	document.body.appendChild(txtValue);
	txtValue.select();

	return txtValue;
}

/**************************************************************************
 * 각 COMPONENT 별 EVENT 영역
 **************************************************************************/
/**
 * @description grid onkeydown event --> ctrl and c or v key down check  ( for nexacro & less than ie 11 )
*/
CommLib.grdCopyPasteStateChk = function(obj:nexacro.Grid,e:nexacro.KeyEventInfo)
{
	var keycode = e.keycode;
		
	//only ctrl key down
	if(e.ctrlkey && !e.shiftkey && !e.altkey)
	{
		//ctrl + c
		if(keycode == 67)
		{
			obj.bGridCopy = true;
		}//ctrl + v
		else if(keycode == 86)
		{
			obj.bGridPaste = true;
		}
	}
};

/**
 * @description grid onkeyup event --> ctrl and c or v key down excute  ( for nexacro & less than ie 11 )
*/
CommLib.grdCopyPaste = function(obj:nexacro.Grid,e:nexacro.KeyEventInfo)
{
	var objTargetForm = obj.targetForm;
	var keycode = e.keycode;
	var colSeperator = obj.colSeperator;
	
	//ctrl + c
	if(obj.bGridCopy == true)
	{
		obj.bGridCopy = false;
		var startrow = nexacro.toNumber(obj.selectstartrow),
			endrow   = nexacro.toNumber(obj.selectendrow),
			startcol = nexacro.toNumber(obj.selectstartcol),
			endcol   = nexacro.toNumber(obj.selectendcol);
		
			var copyData = "";
					
			for (var i = startrow; i <= endrow; i++) 
			{
				for (var j = startcol; j <= endcol; j++) 
				{							
					var value = obj.getCellValue(i,j);

					if(!this.gfn_isNull(value))
					{
						if (j < obj.selectendcol) 
						{
							copyData += obj.getCellValue(i,j) + colSeperator;
						} 
						else 
						{
							copyData += obj.getCellValue(i,j);
						}
					}
				}
				
				if (i < obj.selectendrow)
				{
					copyData += "\r\n";
				}
			}
			
			copyData += "\r\n";
			
			//clipboard
			system.clearClipboard();
			system.setClipboard("CF_TEXT",copyData);
			
	} //ctrl + v
	else if(obj.bGridPaste == true)
	{
		obj.bGridPaste = false;
		//clipboard
		var copyData = system.getClipboard("CF_TEXT");
		copyData = new String(copyData);
		var rowData = copyData.split("\r\n");
		var rowDataCount = rowData.length - 1;
		
		if(rowDataCount < 1)
		{
			e.stopPropagation();
			return;
		}
	
		obj.set_enableevent(false);
		obj.set_enableredraw(false); 
						
		var ds = obj.getBindDataset();
		ds.set_enableevent(false); 
		
		var grdCellCount = obj.getCellCount("body");
		var rowCount = ds.getRowCount();
		var startrow = nexacro.toNumber(obj.selectstartrow),
			endrow   = nexacro.toNumber(obj.selectendrow),
			startcol = nexacro.toNumber(obj.selectstartcol),
			endcol = 0;
		
		var currRow = startrow;
		var cellIndex = startcol;
		var maxColumnCount = 0;
						
		//check current cell editType 
		for (var i = 0; i < rowDataCount; i++)
		{
			if(rowCount <= currRow)
			{
				ds.addRow();
			}
			
			var columnData = rowData[i].split(colSeperator);
			var columnLoopCount = cellIndex + columnData.length;
			
			if(columnLoopCount > grdCellCount) 
			{
				columnLoopCount = grdCellCount;
			}
			
			if(maxColumnCount < columnLoopCount)
			{
				maxColumnCount = columnLoopCount;
			}
			
			var k = 0;
			for(var j = cellIndex; j < columnLoopCount; j++)
			{											
				var colid = obj.getCellProperty("body", j, "text").substr(5);						
				var tempValue = columnData[k];
				
				if(!this.gfn_isNull(tempValue))
				{
					ds.setColumn(currRow, colid, tempValue);
				}
				
				k++;									
			}
			
			currRow++;
		}									
		
		ds.rowposition = currRow;	
		
		endrow = endrow + rowDataCount - 1;
		endcol = maxColumnCount - 1;
		
		system.clearClipboard();
										
		obj.set_enableredraw(true);
		obj.set_enableevent(true);
		ds.set_enableevent(true); 
		
		obj.selectArea(startrow, startcol, endrow, endcol);				
		
		//grid enableredraw가 false일 경우 
		//event 전파과정에서 error발생을 막기위한 처리.2015.02.25 버전.
		e.stopPropagation();	
		
	}	
};

/**
 * @description grid onkeydown event --> ctrl and c or v key down check  ( for edge : more than ie 12 & chrome, firefox .. )
*/
CommLib.grdCopyPasteEtc = function(obj:nexacro.Grid,e:nexacro.KeyEventInfo)
{
	var objTargetForm = obj.targetForm;
	var keycode = e.keycode;
	var colSeperator = obj.colSeperator;
	
	if(e.ctrlkey && !e.shiftkey && !e.altkey)
	{	//ctrl + c
		if(keycode == 67)
		{
			var startrow = nexacro.toNumber(obj.selectstartrow),
				endrow   = nexacro.toNumber(obj.selectendrow),
				startcol = nexacro.toNumber(obj.selectstartcol),
				endcol   = nexacro.toNumber(obj.selectendcol);		
			
			var clipText = "";
			for (var i = startrow; i <= endrow; i++) 
			{
				var copyData = [];
				var styleData = [];
				
				for (var j = startcol; j <= endcol; j++)
				{
					var value = obj.getCellValue(i,j);
					copyData.push(value);
					
					if (j < endcol) 
					{
						clipText += value + colSeperator;
					} 
					else 
					{
						clipText += value;
					}						
				}
				
				clipText += "\r\n";
			}
			
			var ta = objTargetForm.createElementTextarea(clipText);								
			obj["ta"] = ta;		
			objTargetForm.targetGrid = obj;			
			objTargetForm.setTimer(777, 100);
			
			if(!this.gfn_isNull(clipText)) 
			{
				objTargetForm.targetGrid = obj;
				objTargetForm.setTimer(1000, 110);
			}
											
			e.stopPropagation();												
		}//ctrl + v
		else if(keycode == 86)
		{
			objTargetForm.targetGrid = obj;
						
			var ta = objTargetForm.createElementTextarea('');
			obj["ta"] = ta;		
							
			objTargetForm.setTimer(888, 100);		

			e.stopPropagation();			
		}
	}
		
}

/**
 * @description form ontimer event --> delay processing data time
*/
CommLib.blinkTimerHandler = function(obj:nexacro.Form,e:nexacro.TimerEventInfo)
{
	var timerid = e.timerid;
	obj.killTimer(timerid);
	
	if(timerid == 777) 
	{ //after copy			
		var ta = obj.targetGrid["ta"];
		if(!ta)
		{
			return;	
		}
		
		document.body.removeChild(ta);
		obj.targetGrid["ta"] = undefined;				
	} 
	else if(timerid == 888)
	{ //after paste
		var ta = obj.targetGrid["ta"];				
		if(!ta)
		{
			return;	
		}
		
		var clipText = ta.value;
		document.body.removeChild(ta);
		obj.setPasteData(obj,clipText);
		obj.targetGrid["ta"] = undefined;
	}
}

/**************************************************************************
*  공통 함수 처리 영역
   해당 함수의 경우 프로젝트 사용 시 프로젝트 공통함수로 전환을 권장 드립니다.
**************************************************************************/
/**
 * Function Name : gfn_isNull
 * Description   : 입력값이 null에 해당하는 경우 모두를 한번에 체크한다.
 * Arguments     : sValue - 체크할 문자열( 예 : null 또는 undefined 또는 "" 또는 "abc" )
 * Return        : Boolean sValue이 undefined, null, NaN, "", Array.length = 0인 경우 true
*/
CommLib.gfn_isNull = function (sValue)
{
	if (new String(sValue).valueOf() == "undefined") 
	{
		return true;
	}
	if (sValue == null) 
	{
		return true;
	}

	var v_ChkStr = new String(sValue);

	if (v_ChkStr == null) 
	{
		return true;
	}
	if (v_ChkStr.toString().length == 0) 
	{
		return true;
	}

	return false;
};

////////////////////////////////// Grid General Function //////////////////////////////////

/**
 * @class 그리드의 Sort 초기화
 * @param {Object} objGrid - Grid 대상그리드
 * @return N/A
 * @example
 * this.gfn_initGridCellSort(this.Grid00);
 */
CommLib.gfn_initGridCellSort = function(objGrid)
{
	var sortInfos = objGrid.sortInfos;
	var sortItems = objGrid.sortItems;
	
	if ( this.gfn_isNull(sortInfos) || this.gfn_isNull(sortItems) ) return;
	
	// 정렬상태 초기화.
	for( var j=0; j<sortItems.length;j++){
		var col = sortItems[j];
		var sortInfo = sortInfos[col];
		sortInfo.status = 0;
	}
	
	// 정렬실행
	this._gfnGridExecuteSort(objGrid);
	
	// 정보 초기화
	objGrid.sortInfos = {};
	objGrid.sortItems = [];
};
/**
 * @class 그리드에서 원하는 컬럼의 값이 원하는 값과 일치하는 Row를 배열로 반환
 * @param {Object} objGrid - Grid Component
 * @param {String} sColumn - 비교할 컬럼명(default : GRID_COMM_CHECK) [생략가능]
 * @param {String} sValue - 비교할 값 (default : 1) [생략가능]
 * @return {Array}
 * @example
 * var objReturn = this.gfn_getSelectRowToArray(this.Grid00);	//공통 체크박스
 * var objReturn = this.gfn_getSelectRowToArray(this.Grid00, "CheckColumn", "true");	//개발자 정의
 */
CommLib.gfn_getSelectRowToArray = function(objGrid, sColumn, sValue)
{	
	if (this.gfn_isNull(objGrid))
	{
		this.alert("존재하지 않는 Grid입니다. Grid ID를 확인하세요.");
		return;
	}

	var objBindDs = objGrid.getBindDataset();	
	//생략된 경우 공통체크박스 값 세팅
	if (this.gfn_isNull(sColumn)) sColumn = "GRID_COMM_CHECK";
	if (this.gfn_isNull(sValue)) sValue = "1";
	
	//컬럼이 있는지 확인
	if (this.gfn_isNull(objBindDs.getColumnInfo(sColumn)))
	{
		this.alert(sColumn + "은(는) Dataset에 존재하는 않는 Column입니다. Columnb ID를 확인하세요.");
		return;
	}
		
	var arrSelectRow = [];	
	for (var i=0; i<objBindDs.rowcount; i++)
	{
		if (objBindDs.getColumn(i, sColumn) == sValue)
		{
			arrSelectRow.push(i);
		}
	}
	
	if (arrSelectRow.length == 0) return "";
	else return arrSelectRow;
}
/**
 * @class 그리드에서 원하는 컬럼의 값이 원하는 값과 일치하는 Row를 Dataset로 반환
 * @param {object} objForm - Form Object
 * @param {object} objGrid - Grid Component
 * @param {String} sDsNm - Create Dataset Name
 * @param {String} sGubun - 구분 [Mult:다건(default) | Single:단건] [생략가능]
 * @param {String} sColumn - 비교할 컬럼명(default : GRID_COMM_CHECK) [생략가능]
 * @param {String} sValue - 비교할 값 (default : 1) [생략가능]
 * @return {Object}
 * @example
 * var objReturn = this.gfn_getSelectRowToDs(this, this.Grid00, "ds_Return");
 */
CommLib.gfn_getSelectRowToDs = function(objForm, objGrid, sDsNm, sGubun, sColumn, sValue)
{
	if (this.gfn_isNull(objGrid.name))
	{
		var objApp = nexacro.getApplication() ;
		objApp.alert("grid error");
		return;
	}
	
	if (this.gfn_isNull(sGubun)) sGubun = "Mult";
	if (sGubun == "Mult")
	{
		if (this.gfn_isNull(sColumn)) sColumn = "GRID_COMM_CHECK";
		if (this.gfn_isNull(sValue)) sValue = "1";
	}	
	
	var objOrgDs = objGrid.getBindDataset();	
	
	//컬럼이 있는지 확인
	if (this.gfn_isNull(objOrgDs.getColumnInfo(sColumn)))
	{
		this.alert(sColumn + "은(는) Dataset에 존재하는 않는 Column입니다. Columnb ID를 확인하세요.");
		return;
	}
	
	//Dataset Object 생성
	if(objForm.isValidObject(sDsNm)) objForm.removeChild(sDsNm);

	var objDs = new Dataset(sDsNm);
	objDs.name = sDsNm;
	objForm.addChild(objDs.name, objDs);
	objDs.clearData();
		
	if (sGubun == "Mult")
	{		
		objOrgDs.filter(sColumn + " == '" + sValue +"'");
		if (objOrgDs.rowcount == 0)
		{
			objOrgDs.filter("");
			this.alert("선택한 행이 없습니다.");
			return;
		}
		else
		{
			objDs.copyData(objOrgDs, true);		
		}
		objOrgDs.filter("");
		
		//체크컬럼 삭제
		objDs.set_updatecontrol(false);
		objDs.deleteColumn(sColumn);	
		objDs.set_updatecontrol(true);
	}
	else if (sGubun == "Single")
	{
		objDs.copyData(objOrgDs);
		objDs.clearData();
		if (objOrgDs.rowposition == -1) 
		{
			this.alert("선택한 행이 없습니다.");
			return;
		}
		var nRow = objDs.addRow();
		objDs.copyRow(nRow, objOrgDs, objOrgDs.rowposition);
	}
	
	return objDs;
}
/**
 * @class 그리드에 셀 인덱스에 바인드된 Column명 반환
 * @param {Object} objGrid - Grid Component
 * @param {String} sBand - 찾고자 하는 Band 입니다.<br>
 *							- "head" : Head Band<br>
 *							- "body" : Body Band<br>
 *							- "summ" : Summary Band
 * @param {Number}	nCellIndex - 찾고자 하는 Grid의 Cell 인덱스
 * @return {String}	Column Id
 * @example
 * var sReturn = this.gfn_getBindCellId(this.Grid00, "body", 0);
 */
CommLib.gfn_getBindCellId = function (objGrid, sBand, nCellIndex)
{
	var sCellText = "";
	var sRtnCellId = "";
	var subCell = objGrid.getCellProperty(sBand, nCellIndex, "subcell");
	if ( subCell > 0 )
	{
		sCellText = objGrid.getSubCellProperty(sBand, nCellIndex, 0, "text");
	}
	else
	{
		sCellText = objGrid.getCellProperty(sBand, nCellIndex, "text");
	}
	if ( !this.gfn_isNull(sCellText) )
	{
		if ( sCellText.search(/^BIND\(/) > -1 ) 
		{	
			sRtnCellId = sCellText.replace(/^BIND\(/, "");
			sRtnCellId = sRtnCellId.substr(0, sRtnCellId.length-1);
		} 
		else if ( sCellText.search(/^bind:/) > -1 ) 
		{
			sRtnCellId = sCellText.replace(/^bind:/, "");
		}
	}
	
	return sRtnCellId;
}

this.test3_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	this.gfn_setGrid(this.Grid00);
};

this.Button00_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	var arrArg = {pv_objGrid:this.Grid00};
	var sPopupCallBack = "gfn_callbackGridFilter";
	this.gfn_openPopupDefault("CommGridFilter","sample::CommGridFilter.xfdl",arrArg, "titletext=Filter", sPopupCallBack);	
};

this.Button01_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.Tab00.removeTabpage(0);
	this.Tab00.insertTabpage("tabpage1", 0);
};

this.Button02_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.Grid00.mergeCell(2, 2, 0, 3);
};
]]></Script>
    <Objects>
      <Dataset id="dsList" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="chk" type="STRING" size="256"/>
          <Column id="Column0" type="STRING" size="256"/>
          <Column id="Column1" type="STRING" size="256"/>
          <Column id="Column2" type="STRING" size="256"/>
          <Column id="Column3" type="BIGDECIMAL" size="256"/>
          <Column id="Column4" type="STRING" size="256"/>
          <Column id="Column5" type="BIGDECIMAL" size="256"/>
          <Column id="Column6" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="Column3">321458</Col>
            <Col id="Column4">20170101</Col>
            <Col id="Column5">321458</Col>
            <Col id="Column0">강감찬</Col>
            <Col id="Column2">서울특별시 중구 세종대로 40</Col>
            <Col id="Column1">조회</Col>
            <Col id="Column6">고려시대 명장. 본관은 금주, 초명은 은천. 귀주대첩 승리</Col>
            <Col id="chk">0</Col>
          </Row>
          <Row>
            <Col id="Column3">425862</Col>
            <Col id="Column4">20170201</Col>
            <Col id="Column5">425862</Col>
            <Col id="Column0">김부식</Col>
            <Col id="Column2">경상북도 경주시 불국로 873-243</Col>
            <Col id="Column1">입력</Col>
            <Col id="Column6">고려시대 문신. 본관은 경주, 자는 입지, 시호는 문열</Col>
            <Col id="chk">0</Col>
          </Row>
          <Row>
            <Col id="Column3">57786</Col>
            <Col id="Column4">20170601</Col>
            <Col id="Column5">57786</Col>
            <Col id="Column0">정몽주</Col>
            <Col id="Column2">경기도 수원시 장안구 연무동 190</Col>
            <Col id="Column1">수정</Col>
            <Col id="Column6">고려 말 문신. 본관은 연일, 자는 달가. 시조 단심가를 지음</Col>
            <Col id="chk">0</Col>
          </Row>
          <Row>
            <Col id="Column3">51651</Col>
            <Col id="Column4">20170931</Col>
            <Col id="Column5">51651</Col>
            <Col id="Column0">김유신</Col>
            <Col id="Column2">경상북도 영주시 부석사로 345</Col>
            <Col id="Column1">삭제</Col>
            <Col id="Column6">삼국통일을 이룩한 신라 장군. 본관은 김해. 가야국의 시조 김수로왕(金首露王)의 12대손. 흥무대왕으로 추존</Col>
            <Col id="chk">0</Col>
          </Row>
          <Row>
            <Col id="Column3">216548</Col>
            <Col id="Column4">20171005</Col>
            <Col id="Column5">216548</Col>
            <Col id="Column0">최무선</Col>
            <Col id="Column2">충청남도 부여군 정림로 83</Col>
            <Col id="Column1">조회</Col>
            <Col id="Column6">고려 말, 조선 초 발명가. 본관은 영주. 원나라에서 화포제작법을 배워 우리나라에서도 제작함</Col>
            <Col id="chk">0</Col>
          </Row>
          <Row>
            <Col id="Column3">216218</Col>
            <Col id="Column4">20171111</Col>
            <Col id="Column5">216218</Col>
            <Col id="Column0">정중부</Col>
            <Col id="Column2">경기도 여주시 북내면 상교리 411-1</Col>
            <Col id="Column1">입력</Col>
            <Col id="Column6">고려시대 무신. 본관은 해주. 무신의 난으로 정권을 잡음</Col>
            <Col id="chk">0</Col>
          </Row>
          <Row>
            <Col id="Column3">954561</Col>
            <Col id="Column4">20170101</Col>
            <Col id="Column5">954561</Col>
            <Col id="Column0">김부식</Col>
            <Col id="Column2">서울특별시 종로구 종로 99</Col>
            <Col id="Column1">수정</Col>
            <Col id="Column6">고려시대 문신. 본관은 경주, 자는 입지, 시호는 문열</Col>
            <Col id="chk">0</Col>
          </Row>
          <Row>
            <Col id="Column3">2121684</Col>
            <Col id="Column4">20170201</Col>
            <Col id="Column5">2121684</Col>
            <Col id="Column0">안중근</Col>
            <Col id="Column2">경상북도 경주시 대경로 4859</Col>
            <Col id="Column1">삭제</Col>
            <Col id="Column6">한말의 독립운동가. 본관은 순흥. 1909년(융희 2년)에 만주 하얼빈에서 이토 히로부미를 죽임. 건국훈장 대한민국장을 수상</Col>
            <Col id="chk">0</Col>
          </Row>
          <Row>
            <Col id="Column3">6549845</Col>
            <Col id="Column4">20170601</Col>
            <Col id="Column5">6549845</Col>
            <Col id="Column0">안창호</Col>
            <Col id="Column2">경기도 이천시 관고동 501-7</Col>
            <Col id="Column1">조회</Col>
            <Col id="Column6">한말의 독립운동가·사상가. 호는 도산. 신민회를 조직. 《신한민보(新韓民報)》를 창간. 건국훈장 대한민국장을 수상함</Col>
            <Col id="chk">0</Col>
          </Row>
          <Row>
            <Col id="Column3">65150</Col>
            <Col id="Column4">20170931</Col>
            <Col id="Column5">65150</Col>
            <Col id="Column0">유관순</Col>
            <Col id="Column2">충청남도 부여군 부여읍 동남리 산16-9</Col>
            <Col id="Column1">입력</Col>
            <Col id="Column6">한말의 독립운동가. 충남 천안 출생. 1919년 아우내 장터에서 3000여 군중에게 태극기를 나눠 주며 시위를 지휘하다가 일본 헌병대에 체포. 1920년 옥사함. 건국훈장 독립장을 수상</Col>
            <Col id="chk">0</Col>
          </Row>
          <Row>
            <Col id="chk">0</Col>
            <Col id="Column0">이종무</Col>
            <Col id="Column1">조회</Col>
            <Col id="Column2">전라북도 익산시 금마면 동고도리 1086</Col>
            <Col id="Column3">158886</Col>
            <Col id="Column4">20170429</Col>
            <Col id="Column5">158886</Col>
            <Col id="Column6">고려 말, 조선 초 무신. 본관은 장수. 일본 대마도를 정벌</Col>
          </Row>
          <Row>
            <Col id="chk">0</Col>
            <Col id="Column0">한명회</Col>
            <Col id="Column1">입력</Col>
            <Col id="Column2">부산광역시 연제구 경기장로 28</Col>
            <Col id="Column3">258624</Col>
            <Col id="Column4">20170111</Col>
            <Col id="Column5">258624</Col>
            <Col id="Column6">조선 전기의 문신. 본관은 청주, 자는 자준. 예종비 장순왕후와 성종비 공혜왕후의 부. 계유정난으로 정권을 받음. 세조 묘정에 배향</Col>
          </Row>
          <Row>
            <Col id="chk">0</Col>
            <Col id="Column0">정몽주</Col>
            <Col id="Column1">수정</Col>
            <Col id="Column2">제주특별자치도 제주시 일주동로 17</Col>
            <Col id="Column3">4569985</Col>
            <Col id="Column4">20170829</Col>
            <Col id="Column5">4569985</Col>
            <Col id="Column6">고려 말 문신. 본관은 연일, 자는 달가. 시조 단심가를 지음</Col>
          </Row>
          <Row>
            <Col id="chk">0</Col>
            <Col id="Column0">문익점</Col>
            <Col id="Column1">삭제</Col>
            <Col id="Column2">경상남도 합천군 가야면 해인사길 122</Col>
            <Col id="Column3">1245568</Col>
            <Col id="Column4">20170605</Col>
            <Col id="Column5">1245568</Col>
            <Col id="Column6">고려시대 학자. 본관은 남평, 자는 일신, 시호는 충선. 원에서 목화씨를 가져와 재배함</Col>
          </Row>
          <Row>
            <Col id="chk">0</Col>
            <Col id="Column0">최영</Col>
            <Col id="Column1">조회</Col>
            <Col id="Column2">서울특별시 종로구 훈정동 1</Col>
            <Col id="Column3">336985</Col>
            <Col id="Column4">20170614</Col>
            <Col id="Column5">336985</Col>
            <Col id="Column6">고려 말 무신. 시호는 무민. 본관은 동주. 위화도회군으로 정권을 잃음</Col>
          </Row>
          <Row>
            <Col id="chk">0</Col>
            <Col id="Column0">장영실</Col>
            <Col id="Column1">입력</Col>
            <Col id="Column2">전라북도 남원시 산내면 대정리 975</Col>
            <Col id="Column3">578962</Col>
            <Col id="Column4">20170231</Col>
            <Col id="Column5">578962</Col>
            <Col id="Column6">조선 시대의 과학자. 본관은 아산. 기생의 아들. 해시계, 문시계, 측우기를 발명</Col>
          </Row>
          <Row>
            <Col id="chk">0</Col>
            <Col id="Column0">곽재우</Col>
            <Col id="Column1">수정</Col>
            <Col id="Column2">전라남도 구례군 마산면 화엄사로 539</Col>
            <Col id="Column3">11235</Col>
            <Col id="Column4">20170723</Col>
            <Col id="Column5">11235</Col>
            <Col id="Column6">조선 중기의 의병장. 본관은 현풍, 자는 계수. 임진왜란때 의병을 일으켜 왜군들을 무찌름. '망우집'을 지음</Col>
          </Row>
          <Row>
            <Col id="chk">0</Col>
            <Col id="Column0">김시민</Col>
            <Col id="Column1">삭제</Col>
            <Col id="Column2">경상북도 안동시 서후면 봉정사길 222</Col>
            <Col id="Column3">569875</Col>
            <Col id="Column4">20170406</Col>
            <Col id="Column5">569875</Col>
            <Col id="Column6">조선 중기의 무신. 본관은 안동, 자는 면오. 임진왜란때 왜군들과 싸워 전사함. 선무공신 2등에 추록. 상락부원군에 추증</Col>
          </Row>
          <Row>
            <Col id="chk">0</Col>
            <Col id="Column0">정양용</Col>
            <Col id="Column1">조회</Col>
            <Col id="Column2">경상북도 영천시 청통면 거조길 400-67</Col>
            <Col id="Column3">5588966</Col>
            <Col id="Column4">20170308</Col>
            <Col id="Column5">5588966</Col>
            <Col id="Column6">조선 후기의 학자.문신, 본관은 나주, 호는 다산, 여유당. 수원 화성을 계획함. 《정다산전서(丁茶山全書)》을 저술(목민심서 등)</Col>
          </Row>
          <Row>
            <Col id="chk">0</Col>
            <Col id="Column0">윤동주</Col>
            <Col id="Column1">입력</Col>
            <Col id="Column2">전라북도 익산시 금마면 기양리 97번지</Col>
            <Col id="Column3">639996</Col>
            <Col id="Column4">20171205</Col>
            <Col id="Column5">639996</Col>
            <Col id="Column6">시인. 북간도에서 충생. 《서시(序詩)》,《또 다른 고향》,《별 헤는 밤》을 지음</Col>
          </Row>
          <Row>
            <Col id="chk">0</Col>
            <Col id="Column0">이중섭</Col>
            <Col id="Column1">조회</Col>
            <Col id="Column2">충청남도 보령시 성주면 성주리 80-4</Col>
            <Col id="Column3">859648</Col>
            <Col id="Column4">20170925</Col>
            <Col id="Column5">859648</Col>
            <Col id="Column6">한국의 서양화과. 호는 대향. 평양 출생. 작품으로 《소》《흰 소》등이 있음</Col>
          </Row>
          <Row>
            <Col id="chk">0</Col>
            <Col id="Column0">박문수</Col>
            <Col id="Column1">입력</Col>
            <Col id="Column2">충청남도 천안시 서북구 성환읍 대홍리 319-8</Col>
            <Col id="Column3">15698</Col>
            <Col id="Column4">20170722</Col>
            <Col id="Column5">15698</Col>
            <Col id="Column6">조선 후기의 문신. 본관은 고령, 자는 성보. 영조때 정미환국으로 영남 엄행어사로 나가 부정관리들을 적발함</Col>
          </Row>
          <Row>
            <Col id="chk">0</Col>
            <Col id="Column0">황진이</Col>
            <Col id="Column1">수정</Col>
            <Col id="Column2">서울특별시 종로구 율곡로 99</Col>
            <Col id="Column3">75489</Col>
            <Col id="Column4">20170614</Col>
            <Col id="Column5">75489</Col>
            <Col id="Column6">조선시대 시인, 명기(기생). 기생명은 명월.  《만월대 회고시》《박연폭포시》《봉별소양곡시》를 지음</Col>
          </Row>
          <Row>
            <Col id="chk">0</Col>
            <Col id="Column0">김정호</Col>
            <Col id="Column1">삭제</Col>
            <Col id="Column2">충청북도 충주시 중앙탑면 탑평리 11</Col>
            <Col id="Column3">63963</Col>
            <Col id="Column4">20170416</Col>
            <Col id="Column5">63963</Col>
            <Col id="Column6">조선 후기 지리학자. 본관은 청도, 자는 백원. 《대동여지도》를 만듬</Col>
          </Row>
          <Row>
            <Col id="chk">0</Col>
            <Col id="Column0">홍길동</Col>
            <Col id="Column1">조회</Col>
            <Col id="Column2">서울특별시 용산구 서빙고로 137</Col>
            <Col id="Column3">668955</Col>
            <Col id="Column4">20170814</Col>
            <Col id="Column5">668955</Col>
            <Col id="Column6">허균이 지은 '홍길동전'의 주인공. 실존인물</Col>
          </Row>
          <Row>
            <Col id="chk">0</Col>
            <Col id="Column0">신숙주</Col>
            <Col id="Column1">입력</Col>
            <Col id="Column2">인천광역시 강화군 길상면 전등사로 37-41</Col>
            <Col id="Column3">754896</Col>
            <Col id="Column4">20170517</Col>
            <Col id="Column5">754896</Col>
            <Col id="Column6">조선 초기의 문신. 본관은 고령, 자는 범옹. 세종의 총애를 가장 많이 받은 학자이자, 계유정난으로 정난공신에 등록됨. 성종 묘정에 배향</Col>
          </Row>
          <Row>
            <Col id="chk">0</Col>
            <Col id="Column0">한석봉</Col>
            <Col id="Column1">수정</Col>
            <Col id="Column2">경기도 안양시 만안구 예술공원로103번길 4</Col>
            <Col id="Column3">1258963</Col>
            <Col id="Column4">20170318</Col>
            <Col id="Column5">1258963</Col>
            <Col id="Column6">조선 중기의 서예가. 본관은 삼화, 호가 석봉이다. 왕희지, 안진경의 필법을 익혀 해.행.초 등 각 서체에 모두 뛰어남</Col>
          </Row>
          <Row>
            <Col id="chk">0</Col>
            <Col id="Column0">전봉준</Col>
            <Col id="Column1">삭제</Col>
            <Col id="Column2">경상북도 봉화군 춘양면 서원촌길 8-14</Col>
            <Col id="Column3">458962</Col>
            <Col id="Column4">20170704</Col>
            <Col id="Column5">458962</Col>
            <Col id="Column6">조선 후기 동학농민운동의 지도자. 초명은 명숙, 별명이 녹두장군이다</Col>
          </Row>
          <Row>
            <Col id="chk">0</Col>
            <Col id="Column0">김대건</Col>
            <Col id="Column1">조회</Col>
            <Col id="Column2">경기도 여주시 북내면 상교리 419-3번지</Col>
            <Col id="Column3">15756</Col>
            <Col id="Column4">20170114</Col>
            <Col id="Column5">15756</Col>
            <Col id="Column6">조선 최초의 신부. 본관은 김해, 세례명은 안드레아. 조선 후기 박해사건으로 가족들을 모두 잃음. 후에 25세로 순교함</Col>
          </Row>
          <Row>
            <Col id="chk">0</Col>
            <Col id="Column0">방정환</Col>
            <Col id="Column1">입력</Col>
            <Col id="Column2">대구광역시 수성구 청호로 321</Col>
            <Col id="Column3">25896</Col>
            <Col id="Column4">20170326</Col>
            <Col id="Column5">25896</Col>
            <Col id="Column6">아동문학의 보급과 아동보호운동의 선구자인 아동문학가. 호는 소파. 어린이날을 공포</Col>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
  </Form>
</FDL>
