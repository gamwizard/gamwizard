<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="tempPop" width="480" height="720" titletext="New Form">
    <Layouts>
      <Layout height="720" width="480">
        <Button id="Button00" taborder="0" text="Button00" left="350" top="10" width="120" height="50" onclick="Button00_onclick" test="1234"/>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[include "lib::lib_base.xjs";
include "lib::lib_date.xjs";

this.Button00_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	//팝업오픈 함수 호출
	this.fnOpenSchedulePop("new");
};

/**
* @description 	      	: 팝업 호출 함수
* @param sPopupType		: 팝업 타입(new : 신규, modify 수정)
* @param sId    		: 일정 ID
* @param sDate    		: 일정 일자
* @param sType    		: 일정 타입
* @param sTitle    		: 일정 제목
* @param sContent    	: 일정 내용
* @return             	: 없음
*/
this.fnOpenSchedulePop = function(sPopupType, sId, sSDate, sEDate, sType, sTitle, sContent)
{
	var oArg = { "popuptype" : sPopupType, "scheduleid" : "", "group" : "", "userid" : "", "sdate" : "", "edate" : "", "type" : "", "title" : "", "content" : "" };
	
	if(sPopupType=="modify")
	{
		if(sScheduleId)oArg.scheduleid = sScheduleId;
		if(sGroup)oArg.group = sGroup;
		if(sId)oArg.userid = sId;
		if(sSDate)oArg.sdate = sSDate;
		if(sEDate)oArg.edate = sEDate;
		if(sType)oArg.type = sType;
		if(sTitle)oArg.title = sTitle;
		if(sContent)oArg.content = sContent;
	}
	
	this.gfnShowModal("popupModal", oArg, "techtip::schedulerv2_popup.xfdl", "fnPopupCallBack", this, 400, 300, true, true, null);
}

/**
* @description 	      	: 팝업 콜백 함수
* @param sFormId		: 팝업 ID
* @param sArg    		: 일정 정보
* @return             	: 없음
*/
this.fnPopupCallBack = function(sFormId, sArg)
{
	if(sFormId == 'popupModal')
	{
		//일정 정보가 있을 경우
		if(sArg)
		{
			var nRow;
			
			//일정 정보를 JSON오브젝트로 만들기
			var objRtn = JSON.parse(sArg);
			
			//수정일 경우
			if(objRtn.popuptype=="modify")
			{
				//데이터셋에서 ID에 해당하는 일정 찾기
				nRow = this.dsSchedule.findRow("id", objRtn.id);
				
				//일정 정보 변경
				this.dsSchedule.setColumn(nRow, "title", objRtn.title);
				this.dsSchedule.setColumn(nRow, "sdate", objRtn.sdate);
				this.dsSchedule.setColumn(nRow, "edate", objRtn.edate);
				this.dsSchedule.setColumn(nRow, "type", objRtn.type);
				this.dsSchedule.setColumn(nRow, "content", objRtn.content);
			}
			//신규일 경우
			else if(objRtn.popuptype=="new")
			{
				//신규 Row 추가
				nRow = this.dsSchedule.addRow();
				
				//일정 정보 등록
				this.dsSchedule.setColumn(nRow, "id", nexacro.round(Math.random()*1000, 0));
				this.dsSchedule.setColumn(nRow, "title", objRtn.title);
				this.dsSchedule.setColumn(nRow, "sdate", objRtn.sdate);
				this.dsSchedule.setColumn(nRow, "edate", objRtn.edate);
				this.dsSchedule.setColumn(nRow, "type", objRtn.type);
				this.dsSchedule.setColumn(nRow, "content", objRtn.content);
			}
			
			//스케줄 조회 함수 호출
			this.gfnLoadScheduler(this.grpScheduler);
		}
	}
}

/**
* @description 	      		: 팝업 공통 함수
* @param sPopupId  			: 팝업 ID
* @param arrArguments    	: 전달할 Arguments
* @param sPopupUrl    		: 팝업 URL
* @param popupCallback    	: 팝업 Callback 함수명
* @param obj    			: 부모 Form 오브젝트
* @param nPopupWidth    	: 팝업 Width
* @param nPopupHeight    	: 팝업 Height
* @param bShowFrameTitle    : 타이틀바 표현 여부
* @param bShowFrameStatus	: 스테이터스바 표현 여부
* @param sAlignType			: 팝업 표시 위치 
* @return             		: 없음
*/
this.gfnShowModal = function (sPopupId, arrArguments, sPopupUrl, popupCallback, obj, nPopupWidth, nPopupHeight, bShowFrameTitle, bShowFrameStatus, sAlignType)
{
	// 현재 구동되는 정보를 업데이트 한다.
	var childFrame = new ChildFrame();
	var parentFrame = obj.getOwnerFrame();
	
	var sOpenAlignType = "center middle";

	// TO-DO 팝업사이즈 미지정 시 디폴트 값 적용
	if (this.gfnIsNull(nPopupWidth)) 
	{
		nPopupWidth = obj.confing.popupWidth;
	}

	if (this.gfnIsNull(nPopupHeight)) 
	{
		nPopupHeight = obj.confing.popupHeight;
	}

	var sShowStatus;
	if (this.gfnIsNull(bShowFrameStatus) || bShowFrameStatus == false) 
	{
		sShowStatus = false;
	}
	else if (bShowFrameStatus == true) 
	{
		sShowStatus = true;
	}
	
	if (!this.gfnIsNull(sAlignType)) 
	{
		sOpenAlignType = sAlignType;
	}

	var nPopupLeft = "";
	var nPopupTop = "";

	// 팝업 포지션 값 위치 설정
	nPopupLeft = 0;
	nPopupTop = 0;
	
	/* ===== Statusbar 옵션 추가 - Start ===== */
	if (sShowStatus == true) 
	{
		childFrame.init(sPopupId, nPopupLeft, nPopupTop, nexacro.toNumber(nPopupWidth) + 4, nexacro.toNumber(nPopupHeight) + 20 + 4 + 25, null, null, sPopupUrl);
		childFrame.set_statusbarheight(25);
		childFrame.set_showstatusbar(true);
	}
	else 
	{
		childFrame.init(sPopupId, nPopupLeft, nPopupTop, nexacro.toNumber(nPopupWidth) + 4, nexacro.toNumber(nPopupHeight) + 20 + 4, null, null, sPopupUrl);
	}
	
	/* ===== Statusbar 옵션 추가 - End   ===== */
	childFrame.set_openalign(sOpenAlignType);
	childFrame.set_overlaycolor("RGBA(30, 144, 255, 0.75)");
	childFrame.set_autosize(false);	
	childFrame.set_dragmovetype("normal");

	if (this.gfnIsNull(bShowFrameTitle) || bShowFrameTitle == true) 
	{
		childFrame.set_showtitlebar(true);
		childFrame.set_border("3 solid #351b6f");
		childFrame.set_border("normal");
	}else{
		childFrame.set_showtitlebar(false);
	}
	
	// 동적으로 생성한 ChildFrame을 Modal Dialog로 보여줌.
	childFrame.showModal(parentFrame, arrArguments, obj, popupCallback, true);
};
]]></Script>
  </Form>
</FDL>
